{"ast":null,"code":"import * as echarts from \"echarts\";\nexport default {\n  props: {\n    // 接收父组件传递的团队数据\n    teamData: {\n      type: Array,\n      required: true\n    }\n  },\n  data() {\n    return {\n      weights: {\n        w1: 1,\n        // 论文初始权重\n        w2: 1,\n        // 竞赛初始权重\n        w3: 1 // 培训初始权重\n      },\n      TeamChart: null\n    };\n  },\n  watch: {\n    teamData(newData) {\n      this.updateChart(newData);\n    },\n    // 监听权重变化，实时更新图表\n    weights: {\n      handler: \"updateChart\",\n      deep: true\n    }\n  },\n  created() {},\n  mounted() {\n    this.initChart();\n  },\n  methods: {\n    initChart() {\n      const chartDom = this.$refs.TeamChart;\n      this.TeamChart = echarts.init(chartDom);\n      this.updateChart();\n    },\n    // updateChart() {\n    //     if (!this.teamData.length) return;  // 确保 data 不为空\n    //     const computedData = this.teamData.map((team) => {\n    //         const contribution =\n    //             team.paper * this.weights.w1 +\n    //             team.competition * this.weights.w2 +\n    //             team.training * this.weights.w3;\n    //         return { name: team.name, contribution };\n    //     });\n\n    //     const option = {\n    //         title: {\n    //             text: \"团队贡献度柱状图\"\n    //         },\n    //         tooltip: {\n    //             trigger: \"axis\",\n    //             axisPointer: { type: \"shadow\" }\n    //         },\n    //         xAxis: {\n    //             type: \"category\",\n    //             data: computedData.map((item) => item.name)\n    //         },\n    //         yAxis: {\n    //             type: \"value\"\n    //         },\n    //         series: [\n    //             {\n    //                 name: \"贡献度\",\n    //                 type: \"bar\",\n    //                 data: computedData.map((item) => item.contribution),\n    //                 itemStyle: { color: \"#FF9800\" }\n    //             }\n    //         ]\n    //     };\n\n    //     this.TeamChart.setOption(option);\n    // }\n    updateChart() {\n      if (!this.teamData.length) return; // Ensure data is not empty\n      const computedData = this.teamData.map(team => {\n        const contribution = team.paper * this.weights.w1 + team.competition * this.weights.w2 + team.training * this.weights.w3;\n        return {\n          name: team.name,\n          contribution\n        };\n      });\n\n      // Find the maximum and minimum contribution values to scale the color\n      const maxContribution = Math.max(...computedData.map(item => item.contribution));\n      const minContribution = Math.min(...computedData.map(item => item.contribution));\n\n      // Function to generate a color based on contribution value\n      const getColor = contribution => {\n        const scale = (contribution - minContribution) / (maxContribution - minContribution); // Scale from 0 to 1\n        // You can adjust the base color and lightness here\n        const red = Math.floor(255 * (1 - scale)); // Darker red for higher values, lighter for lower\n        const green = Math.floor(64 * scale); // Light green for higher values\n        const blue = Math.floor(255 * scale); // Lighter blue for higher values\n        return `rgb(${red}, ${green}, ${blue})`; // Generate RGB color\n      };\n      const option = {\n        title: {\n          text: \"团队贡献度柱状图\"\n        },\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"shadow\"\n          }\n        },\n        xAxis: {\n          type: \"category\",\n          data: computedData.map(item => item.name)\n        },\n        yAxis: {\n          type: \"value\"\n        },\n        series: [{\n          name: \"贡献度\",\n          type: \"bar\",\n          data: computedData.map(item => item.contribution),\n          itemStyle: {\n            // Set dynamic colors for each bar based on its contribution\n            color: params => getColor(params.data)\n          }\n        }]\n      };\n      this.TeamChart.setOption(option);\n    }\n  }\n};","map":{"version":3,"names":["echarts","props","teamData","type","Array","required","data","weights","w1","w2","w3","TeamChart","watch","newData","updateChart","handler","deep","created","mounted","initChart","methods","chartDom","$refs","init","length","computedData","map","team","contribution","paper","competition","training","name","maxContribution","Math","max","item","minContribution","min","getColor","scale","red","floor","green","blue","option","title","text","tooltip","trigger","axisPointer","xAxis","yAxis","series","itemStyle","color","params","setOption"],"sources":["src/components/TeamChartsConponent.vue"],"sourcesContent":["<template>\n    <div>\n        <div class=\"tip-message\" style=\"font-size: 12px; color: #888; margin-bottom: 10px; text-align: center;\">\n            请在下方输入各个成果的权重,默认三个重要性相同\n        </div>\n        <div class=\"input-container\">\n\n            <div class=\"input-group\">\n                <label for=\"paper-weight\">论文:</label>\n                <el-input-number id=\"paper-weight\" v-model=\"weights.w1\" :min=\"0\" :max=\"10\" size=\"mini\">\n                </el-input-number>\n            </div>\n            <div class=\"input-group\">\n                <label for=\"competition-weight\">竞赛:</label>\n                <el-input-number id=\"competition-weight\" v-model=\"weights.w2\" :min=\"0\" :max=\"10\" size=\"mini\">\n                </el-input-number>\n            </div>\n            <div class=\"input-group\">\n                <label for=\"training-weight\">培训:</label>\n                <el-input-number id=\"training-weight\" v-model=\"weights.w3\" :min=\"0\" :max=\"10\" size=\"mini\">\n                </el-input-number>\n            </div>\n        </div>\n        <div ref=\"TeamChart\" class=\"chart-container\"></div>\n    </div>\n</template>\n\n<script>\nimport * as echarts from \"echarts\";\n\nexport default {\n    props: {\n        // 接收父组件传递的团队数据\n        teamData: {\n            type: Array,\n            required: true\n        }\n    },\n    data() {\n        return {\n            weights: {\n                w1: 1, // 论文初始权重\n                w2: 1, // 竞赛初始权重\n                w3: 1  // 培训初始权重\n            },\n            TeamChart: null\n        };\n    },\n    watch: {\n        teamData(newData) {\n            this.updateChart(newData);\n        },\n        // 监听权重变化，实时更新图表\n        weights: {\n            handler: \"updateChart\",\n            deep: true\n        }\n    },\n    created() {\n    },\n    mounted() {\n        this.initChart();\n    },\n    methods: {\n        initChart() {\n            const chartDom = this.$refs.TeamChart;\n            this.TeamChart = echarts.init(chartDom);\n            this.updateChart();\n        },\n        // updateChart() {\n        //     if (!this.teamData.length) return;  // 确保 data 不为空\n        //     const computedData = this.teamData.map((team) => {\n        //         const contribution =\n        //             team.paper * this.weights.w1 +\n        //             team.competition * this.weights.w2 +\n        //             team.training * this.weights.w3;\n        //         return { name: team.name, contribution };\n        //     });\n\n        //     const option = {\n        //         title: {\n        //             text: \"团队贡献度柱状图\"\n        //         },\n        //         tooltip: {\n        //             trigger: \"axis\",\n        //             axisPointer: { type: \"shadow\" }\n        //         },\n        //         xAxis: {\n        //             type: \"category\",\n        //             data: computedData.map((item) => item.name)\n        //         },\n        //         yAxis: {\n        //             type: \"value\"\n        //         },\n        //         series: [\n        //             {\n        //                 name: \"贡献度\",\n        //                 type: \"bar\",\n        //                 data: computedData.map((item) => item.contribution),\n        //                 itemStyle: { color: \"#FF9800\" }\n        //             }\n        //         ]\n        //     };\n\n        //     this.TeamChart.setOption(option);\n        // }\n        updateChart() {\n            if (!this.teamData.length) return;  // Ensure data is not empty\n            const computedData = this.teamData.map((team) => {\n                const contribution =\n                    team.paper * this.weights.w1 +\n                    team.competition * this.weights.w2 +\n                    team.training * this.weights.w3;\n                return { name: team.name, contribution };\n            });\n\n            // Find the maximum and minimum contribution values to scale the color\n            const maxContribution = Math.max(...computedData.map(item => item.contribution));\n            const minContribution = Math.min(...computedData.map(item => item.contribution));\n\n            // Function to generate a color based on contribution value\n            const getColor = (contribution) => {\n                const scale = (contribution - minContribution) / (maxContribution - minContribution); // Scale from 0 to 1\n                // You can adjust the base color and lightness here\n                const red = Math.floor(255 * (1 - scale));   // Darker red for higher values, lighter for lower\n                const green = Math.floor(64 * scale);        // Light green for higher values\n                const blue = Math.floor(255 * scale);       // Lighter blue for higher values\n                return `rgb(${red}, ${green}, ${blue})`;     // Generate RGB color\n            };\n\n            const option = {\n                title: {\n                    text: \"团队贡献度柱状图\"\n                },\n                tooltip: {\n                    trigger: \"axis\",\n                    axisPointer: { type: \"shadow\" }\n                },\n                xAxis: {\n                    type: \"category\",\n                    data: computedData.map((item) => item.name)\n                },\n                yAxis: {\n                    type: \"value\"\n                },\n                series: [\n                    {\n                        name: \"贡献度\",\n                        type: \"bar\",\n                        data: computedData.map((item) => item.contribution),\n                        itemStyle: {\n                            // Set dynamic colors for each bar based on its contribution\n                            color: (params) => getColor(params.data)\n                        }\n                    }\n                ]\n            };\n\n            this.TeamChart.setOption(option);\n        }\n\n    }\n};\n</script>\n\n<style scoped>\n.chart-container {\n    width: 500px;\n    height: 400px;\n    margin-top: 20px;\n}\n\n.input-container {\n    margin-bottom: 20px;\n    display: flex;\n    width: 400px;\n    gap: 20px;\n    align-items: center;\n}\n</style>"],"mappings":"AA4BA,YAAAA,OAAA;AAEA;EACAC,KAAA;IACA;IACAC,QAAA;MACAC,IAAA,EAAAC,KAAA;MACAC,QAAA;IACA;EACA;EACAC,KAAA;IACA;MACAC,OAAA;QACAC,EAAA;QAAA;QACAC,EAAA;QAAA;QACAC,EAAA;MACA;MACAC,SAAA;IACA;EACA;EACAC,KAAA;IACAV,SAAAW,OAAA;MACA,KAAAC,WAAA,CAAAD,OAAA;IACA;IACA;IACAN,OAAA;MACAQ,OAAA;MACAC,IAAA;IACA;EACA;EACAC,QAAA,GACA;EACAC,QAAA;IACA,KAAAC,SAAA;EACA;EACAC,OAAA;IACAD,UAAA;MACA,MAAAE,QAAA,QAAAC,KAAA,CAAAX,SAAA;MACA,KAAAA,SAAA,GAAAX,OAAA,CAAAuB,IAAA,CAAAF,QAAA;MACA,KAAAP,WAAA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACAA,YAAA;MACA,UAAAZ,QAAA,CAAAsB,MAAA;MACA,MAAAC,YAAA,QAAAvB,QAAA,CAAAwB,GAAA,CAAAC,IAAA;QACA,MAAAC,YAAA,GACAD,IAAA,CAAAE,KAAA,QAAAtB,OAAA,CAAAC,EAAA,GACAmB,IAAA,CAAAG,WAAA,QAAAvB,OAAA,CAAAE,EAAA,GACAkB,IAAA,CAAAI,QAAA,QAAAxB,OAAA,CAAAG,EAAA;QACA;UAAAsB,IAAA,EAAAL,IAAA,CAAAK,IAAA;UAAAJ;QAAA;MACA;;MAEA;MACA,MAAAK,eAAA,GAAAC,IAAA,CAAAC,GAAA,IAAAV,YAAA,CAAAC,GAAA,CAAAU,IAAA,IAAAA,IAAA,CAAAR,YAAA;MACA,MAAAS,eAAA,GAAAH,IAAA,CAAAI,GAAA,IAAAb,YAAA,CAAAC,GAAA,CAAAU,IAAA,IAAAA,IAAA,CAAAR,YAAA;;MAEA;MACA,MAAAW,QAAA,GAAAX,YAAA;QACA,MAAAY,KAAA,IAAAZ,YAAA,GAAAS,eAAA,KAAAJ,eAAA,GAAAI,eAAA;QACA;QACA,MAAAI,GAAA,GAAAP,IAAA,CAAAQ,KAAA,YAAAF,KAAA;QACA,MAAAG,KAAA,GAAAT,IAAA,CAAAQ,KAAA,MAAAF,KAAA;QACA,MAAAI,IAAA,GAAAV,IAAA,CAAAQ,KAAA,OAAAF,KAAA;QACA,cAAAC,GAAA,KAAAE,KAAA,KAAAC,IAAA;MACA;MAEA,MAAAC,MAAA;QACAC,KAAA;UACAC,IAAA;QACA;QACAC,OAAA;UACAC,OAAA;UACAC,WAAA;YAAA/C,IAAA;UAAA;QACA;QACAgD,KAAA;UACAhD,IAAA;UACAG,IAAA,EAAAmB,YAAA,CAAAC,GAAA,CAAAU,IAAA,IAAAA,IAAA,CAAAJ,IAAA;QACA;QACAoB,KAAA;UACAjD,IAAA;QACA;QACAkD,MAAA,GACA;UACArB,IAAA;UACA7B,IAAA;UACAG,IAAA,EAAAmB,YAAA,CAAAC,GAAA,CAAAU,IAAA,IAAAA,IAAA,CAAAR,YAAA;UACA0B,SAAA;YACA;YACAC,KAAA,EAAAC,MAAA,IAAAjB,QAAA,CAAAiB,MAAA,CAAAlD,IAAA;UACA;QACA;MAEA;MAEA,KAAAK,SAAA,CAAA8C,SAAA,CAAAZ,MAAA;IACA;EAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
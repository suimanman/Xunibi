{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  data() {\n    return {\n      users: [],\n      // 用户数据\n      searchQuery: \"\",\n      // 搜索关键词\n      filteredUsers: [],\n      // 筛选后的用户\n      dialogVisible: false,\n      // 控制弹窗显示\n      editMode: false,\n      // 判断是新增还是编辑\n      newUser: {\n        id: null,\n        username: \"\",\n        password: \"\"\n      }\n    };\n  },\n  methods: {\n    // 获取用户列表\n    fetchUsers() {\n      axios.get(\"http://localhost:8080/admins/list\", {\n        withCredentials: true\n      }).then(response => {\n        this.users = response.data;\n        this.filteredUsers = this.users;\n      }).catch(error => {\n        console.error(\"获取用户列表失败:\", error);\n      });\n    },\n    // 查询用户\n    search() {\n      this.filteredUsers = this.users.filter(user => user.username.includes(this.searchQuery));\n    },\n    // 重置查询\n    reset() {\n      this.searchQuery = \"\";\n      this.filteredUsers = this.users;\n    },\n    // 新增用户\n    handleAdd() {\n      this.newUser = {\n        id: null,\n        username: \"\",\n        password: \"\"\n      };\n      this.editMode = false;\n      this.dialogVisible = true;\n    },\n    // 编辑用户\n    handleEdit(user) {\n      this.newUser = {\n        ...user\n      }; // 深拷贝用户数据\n      this.editMode = true;\n      this.dialogVisible = true;\n    },\n    // 删除用户\n    del(userId) {\n      axios.delete(`http://localhost:8080/admins/delete/${userId}`, {\n        withCredentials: true\n      }).then(() => {\n        this.$message.success(\"删除成功\");\n        this.fetchUsers();\n      }).catch(error => {\n        console.error(\"删除失败:\", error);\n      });\n    },\n    // 保存用户（新增或编辑）\n    saveUser() {\n      if (this.editMode) {\n        // 编辑模式\n        axios.put(`http://localhost:8080/admins/update/${this.newUser.id}`, {\n          username: this.newUser.username,\n          password: this.newUser.password\n        }, {\n          withCredentials: true\n        }).then(() => {\n          this.$message.success(\"编辑成功\");\n          this.dialogVisible = false;\n          this.fetchUsers();\n        }).catch(error => {\n          console.error(\"编辑失败:\", error);\n        });\n      } else {\n        // 新增模式\n        axios.post(\"http://localhost:8080/admins/create\", {\n          username: this.newUser.username,\n          password: this.newUser.password\n        }, {\n          withCredentials: true\n        }).then(() => {\n          this.$message.success(\"新增成功\");\n          this.dialogVisible = false;\n          this.fetchUsers();\n        }).catch(error => {\n          console.error(\"新增失败:\", error);\n        });\n      }\n    }\n  },\n  mounted() {\n    this.fetchUsers();\n  }\n};","map":{"version":3,"names":["axios","data","users","searchQuery","filteredUsers","dialogVisible","editMode","newUser","id","username","password","methods","fetchUsers","get","withCredentials","then","response","catch","error","console","search","filter","user","includes","reset","handleAdd","handleEdit","del","userId","delete","$message","success","saveUser","put","post","mounted"],"sources":["src/views/manage/AdminView.vue"],"sourcesContent":["<template>\n    <div>\n        <div class=\"search\">\n            <el-input v-model=\"searchQuery\" placeholder=\"请输入用户名称查询\" style=\"width: 200px\"></el-input>\n            <el-button type=\"info\" plain style=\"margin-left: 10px\" @click=\"search\">查询</el-button>\n            <el-button type=\"warning\" plain style=\"margin-left: 10px\" @click=\"reset\">重置</el-button>\n            <el-button type=\"primary\" plain @click=\"handleAdd\">新增</el-button>\n        </div>\n        <div class=\"table\">\n            <el-table :data=\"filteredUsers\" border>\n                <el-table-column prop=\"adminId\" label=\"用户ID\" sortable></el-table-column>\n                <el-table-column prop=\"username\" label=\"用户名\"></el-table-column>\n                <el-table-column prop=\"password\" label=\"用户密码\"></el-table-column>\n                <el-table-column label=\"操作\">\n                    <template #default=\"scope\">\n                        <el-button size=\"mini\" type=\"primary\" plain @click=\"handleEdit(scope.row)\">编辑</el-button>\n                        <el-button size=\"mini\" type=\"danger\" plain @click=\"del(scope.row.id)\">删除</el-button>\n                    </template>\n                </el-table-column>\n            </el-table>\n        </div>\n\n        <el-dialog :title=\"editMode ? '编辑用户' : '新增用户'\" :visible.sync=\"dialogVisible\">\n            <el-form :model=\"newUser\" label-width=\"100px\">\n                <el-form-item label=\"用户名\">\n                    <el-input v-model=\"newUser.username\" placeholder=\"请输入用户名\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"用户密码\">\n                    <el-input v-model=\"newUser.password\" type=\"password\" placeholder=\"请输入密码\"></el-input>\n                </el-form-item>\n            </el-form>\n            <div slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click=\"dialogVisible = false\">取消</el-button>\n                <el-button type=\"primary\" @click=\"saveUser\">保存</el-button>\n            </div>\n        </el-dialog>\n    </div>\n</template>\n\n<script>\nimport axios from \"axios\";\n\nexport default {\n    data() {\n        return {\n            users: [], // 用户数据\n            searchQuery: \"\", // 搜索关键词\n            filteredUsers: [], // 筛选后的用户\n            dialogVisible: false, // 控制弹窗显示\n            editMode: false, // 判断是新增还是编辑\n            newUser: {\n                id: null,\n                username: \"\",\n                password: \"\"\n            }\n        };\n    },\n    methods: {\n        // 获取用户列表\n        fetchUsers() {\n            axios\n                .get(\"http://localhost:8080/admins/list\", { withCredentials: true })\n                .then((response) => {\n                    this.users = response.data;\n                    this.filteredUsers = this.users;\n                })\n                .catch((error) => {\n                    console.error(\"获取用户列表失败:\", error);\n                });\n        },\n        // 查询用户\n        search() {\n            this.filteredUsers = this.users.filter((user) =>\n                user.username.includes(this.searchQuery)\n            );\n        },\n        // 重置查询\n        reset() {\n            this.searchQuery = \"\";\n            this.filteredUsers = this.users;\n        },\n        // 新增用户\n        handleAdd() {\n            this.newUser = { id: null, username: \"\", password: \"\" };\n            this.editMode = false;\n            this.dialogVisible = true;\n        },\n        // 编辑用户\n        handleEdit(user) {\n            this.newUser = { ...user }; // 深拷贝用户数据\n            this.editMode = true;\n            this.dialogVisible = true;\n        },\n        // 删除用户\n        del(userId) {\n            axios\n                .delete(`http://localhost:8080/admins/delete/${userId}`, { withCredentials: true })\n                .then(() => {\n                    this.$message.success(\"删除成功\");\n                    this.fetchUsers();\n                })\n                .catch((error) => {\n                    console.error(\"删除失败:\", error);\n                });\n        },\n        // 保存用户（新增或编辑）\n        saveUser() {\n            if (this.editMode) {\n                // 编辑模式\n                axios\n                    .put(\n                        `http://localhost:8080/admins/update/${this.newUser.id}`,\n                        {\n                            username: this.newUser.username,\n                            password: this.newUser.password\n                        },\n                        { withCredentials: true }\n                    )\n                    .then(() => {\n                        this.$message.success(\"编辑成功\");\n                        this.dialogVisible = false;\n                        this.fetchUsers();\n                    })\n                    .catch((error) => {\n                        console.error(\"编辑失败:\", error);\n                    });\n            } else {\n                // 新增模式\n                axios\n                    .post(\n                        \"http://localhost:8080/admins/create\",\n                        {\n                            username: this.newUser.username,\n                            password: this.newUser.password\n                        },\n                        { withCredentials: true }\n                    )\n                    .then(() => {\n                        this.$message.success(\"新增成功\");\n                        this.dialogVisible = false;\n                        this.fetchUsers();\n                    })\n                    .catch((error) => {\n                        console.error(\"新增失败:\", error);\n                    });\n            }\n        }\n    },\n    mounted() {\n        this.fetchUsers();\n    }\n};\n</script>\n\n<style scoped>\n.search {\n    display: flex;\n    align-items: center;\n    margin-bottom: 15px;\n}\n\n.table {\n    border: 1px solid #e0e0e0;\n    border-radius: 5px;\n    background-color: #ffffff;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n    padding: 10px;\n}\n</style>\n"],"mappings":"AAwCA,OAAAA,KAAA;AAEA;EACAC,KAAA;IACA;MACAC,KAAA;MAAA;MACAC,WAAA;MAAA;MACAC,aAAA;MAAA;MACAC,aAAA;MAAA;MACAC,QAAA;MAAA;MACAC,OAAA;QACAC,EAAA;QACAC,QAAA;QACAC,QAAA;MACA;IACA;EACA;EACAC,OAAA;IACA;IACAC,WAAA;MACAZ,KAAA,CACAa,GAAA;QAAAC,eAAA;MAAA,GACAC,IAAA,CAAAC,QAAA;QACA,KAAAd,KAAA,GAAAc,QAAA,CAAAf,IAAA;QACA,KAAAG,aAAA,QAAAF,KAAA;MACA,GACAe,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,cAAAA,KAAA;MACA;IACA;IACA;IACAE,OAAA;MACA,KAAAhB,aAAA,QAAAF,KAAA,CAAAmB,MAAA,CAAAC,IAAA,IACAA,IAAA,CAAAb,QAAA,CAAAc,QAAA,MAAApB,WAAA,CACA;IACA;IACA;IACAqB,MAAA;MACA,KAAArB,WAAA;MACA,KAAAC,aAAA,QAAAF,KAAA;IACA;IACA;IACAuB,UAAA;MACA,KAAAlB,OAAA;QAAAC,EAAA;QAAAC,QAAA;QAAAC,QAAA;MAAA;MACA,KAAAJ,QAAA;MACA,KAAAD,aAAA;IACA;IACA;IACAqB,WAAAJ,IAAA;MACA,KAAAf,OAAA;QAAA,GAAAe;MAAA;MACA,KAAAhB,QAAA;MACA,KAAAD,aAAA;IACA;IACA;IACAsB,IAAAC,MAAA;MACA5B,KAAA,CACA6B,MAAA,wCAAAD,MAAA;QAAAd,eAAA;MAAA,GACAC,IAAA;QACA,KAAAe,QAAA,CAAAC,OAAA;QACA,KAAAnB,UAAA;MACA,GACAK,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,UAAAA,KAAA;MACA;IACA;IACA;IACAc,SAAA;MACA,SAAA1B,QAAA;QACA;QACAN,KAAA,CACAiC,GAAA,CACA,4CAAA1B,OAAA,CAAAC,EAAA,IACA;UACAC,QAAA,OAAAF,OAAA,CAAAE,QAAA;UACAC,QAAA,OAAAH,OAAA,CAAAG;QACA,GACA;UAAAI,eAAA;QAAA,CACA,EACAC,IAAA;UACA,KAAAe,QAAA,CAAAC,OAAA;UACA,KAAA1B,aAAA;UACA,KAAAO,UAAA;QACA,GACAK,KAAA,CAAAC,KAAA;UACAC,OAAA,CAAAD,KAAA,UAAAA,KAAA;QACA;MACA;QACA;QACAlB,KAAA,CACAkC,IAAA,CACA,uCACA;UACAzB,QAAA,OAAAF,OAAA,CAAAE,QAAA;UACAC,QAAA,OAAAH,OAAA,CAAAG;QACA,GACA;UAAAI,eAAA;QAAA,CACA,EACAC,IAAA;UACA,KAAAe,QAAA,CAAAC,OAAA;UACA,KAAA1B,aAAA;UACA,KAAAO,UAAA;QACA,GACAK,KAAA,CAAAC,KAAA;UACAC,OAAA,CAAAD,KAAA,UAAAA,KAAA;QACA;MACA;IACA;EACA;EACAiB,QAAA;IACA,KAAAvB,UAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
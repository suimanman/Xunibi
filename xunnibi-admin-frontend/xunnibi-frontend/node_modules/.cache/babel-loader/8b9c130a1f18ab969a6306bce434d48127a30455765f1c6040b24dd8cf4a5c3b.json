{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      teamList: [],\n      // 团队数据列表\n      searchQuery: null,\n      tableData: []\n    };\n  },\n  created() {},\n  mounted() {\n    this.getAchievementList();\n  },\n  methods: {\n    // 查询功能\n    search() {\n      // 检查输入是否合法\n      if (!this.searchQuery) {\n        this.$message.warning(\"请输入团队名称查询\");\n        return;\n      }\n\n      // 根据团队名称过滤表格数据\n      this.tableData = this.tableData.filter(item => item.teamName.toLowerCase().includes(this.searchQuery.toLowerCase()));\n    },\n    // 重置查询\n    reset() {\n      this.searchQuery = null;\n      this.getAchievementList();\n    },\n    async exportFile() {\n      try {\n        const response = await axios.get(\"http://localhost:8080/export/achieve\", {\n          responseType: \"arraybuffer\" // 返回文件数据\n        });\n\n        // 创建一个Blob对象，代表Excel文件\n        const blob = new Blob([response.data], {\n          type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n        });\n\n        // 创建一个下载链接\n        const link = document.createElement('a');\n        link.href = URL.createObjectURL(blob);\n        link.download = \"Achievements_Report.xlsx\"; // 指定下载的文件名\n        link.click(); // 触发下载\n      } catch (error) {\n        console.error(\"导出报表失败:\", error);\n        this.$message.error(\"导出报表失败，请稍后再试\");\n      }\n    },\n    // 获取待审核列表\n    async getAchievementList() {\n      try {\n        const [achievementListResponse, teamListResponse] = await Promise.all([axios.get(\"http://localhost:8080/records/achieveRecords\"), axios.get(\"http://localhost:8080/team/list\")]);\n        if (achievementListResponse.data.code === 200 && teamListResponse.status === 200) {\n          this.tableData = achievementListResponse.data.data.map(item => {\n            const team = teamListResponse.data.find(t => t.teamId === item.teamId);\n            return {\n              ...item,\n              material: item.description,\n              teamName: team ? team.teamName : \"未知\"\n            };\n          });\n        }\n      } catch (error) {\n        console.error(\"获取待审核列表失败:\", error);\n        this.$message.error(\"获取待审核列表失败，请稍后重试\");\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","teamList","searchQuery","tableData","created","mounted","getAchievementList","methods","search","$message","warning","filter","item","teamName","toLowerCase","includes","reset","exportFile","response","get","responseType","blob","Blob","type","link","document","createElement","href","URL","createObjectURL","download","click","error","console","achievementListResponse","teamListResponse","Promise","all","code","status","map","team","find","t","teamId","material","description"],"sources":["src/views/manage/ReviewRecordsView.vue"],"sourcesContent":["<template>\n    <div class=\"container\">\n        <div class=\"header\">\n            <el-input v-model=\"searchQuery\" placeholder=\"请输入团队名称\" style=\"width: 250px\"></el-input>\n            <el-button type=\"primary\" plain @click=\"search\" icon=\"el-icon-zoom-in\">查询</el-button>\n            <el-button type=\"warning\" plain @click=\"reset\" icon=\"el-icon-refresh-left\">重置</el-button>\n            <el-button type=\"info\" plain @click=\"exportFile\" icon=el-icon-download>导出</el-button>\n        </div>\n\n        <div class=\"table-wrapper\">\n            <el-table ref=\"filterTable\" :data=\"tableData\" style=\"width: 100%\" border>\n                <el-table-column prop=\"achievementId\" label=\"id\" align=\"center\" width=\"100px\">\n                </el-table-column>\n                <el-table-column prop=\"material\" label=\"审核材料\" align=\"left\">\n                </el-table-column>\n                <el-table-column prop=\"achievementType\" label=\"审核材料类型\" align=\"center\" width=\"150px\">\n                </el-table-column>\n                <el-table-column prop=\"teamId\" label=\"团队Id\" align=\"center\" width=\"100px\">\n                </el-table-column>\n                <el-table-column prop=\"teamName\" label=\"团队名称\" align=\"center\" width=\"100px\"></el-table-column>\n                <el-table-column prop=\"status\" label=\"审核状态\" align=\"center\" width=\"100px\">\n                </el-table-column>\n            </el-table>\n        </div>\n    </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nexport default {\n    data() {\n        return {\n            teamList: [], // 团队数据列表\n            searchQuery: null,\n            tableData: [],\n        };\n    },\n    created() {\n    },\n    mounted() {\n        this.getAchievementList();\n    },\n    methods: {\n        // 查询功能\n        search() {\n            // 检查输入是否合法\n            if (!this.searchQuery) {\n                this.$message.warning(\"请输入团队名称查询\");\n                return;\n            }\n\n            // 根据团队名称过滤表格数据\n            this.tableData = this.tableData.filter(item =>\n                item.teamName.toLowerCase().includes(this.searchQuery.toLowerCase())\n            );\n        },\n\n        // 重置查询\n        reset() {\n            this.searchQuery = null;\n            this.getAchievementList();\n        },\n\n        async exportFile() {\n            try {\n                const response = await axios.get(\"http://localhost:8080/export/achieve\", {\n                    responseType: \"arraybuffer\", // 返回文件数据\n                });\n\n                // 创建一个Blob对象，代表Excel文件\n                const blob = new Blob([response.data], { type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\" });\n\n                // 创建一个下载链接\n                const link = document.createElement('a');\n                link.href = URL.createObjectURL(blob);\n                link.download = \"Achievements_Report.xlsx\"; // 指定下载的文件名\n                link.click(); // 触发下载\n            } catch (error) {\n                console.error(\"导出报表失败:\", error);\n                this.$message.error(\"导出报表失败，请稍后再试\");\n            }\n        },\n\n        // 获取待审核列表\n        async getAchievementList() {\n            try {\n                const [achievementListResponse, teamListResponse] = await Promise.all([\n                    axios.get(\"http://localhost:8080/records/achieveRecords\"),\n                    axios.get(\"http://localhost:8080/team/list\"),\n                ]);\n                if (achievementListResponse.data.code === 200 && teamListResponse.status === 200) {\n                    this.tableData = achievementListResponse.data.data.map((item) => {\n                        const team = teamListResponse.data.find((t) => t.teamId === item.teamId);\n                        return {\n                            ...item,\n                            material: item.description,\n                            teamName: team ? team.teamName : \"未知\",\n                        }\n                    })\n                }\n            } catch (error) {\n                console.error(\"获取待审核列表失败:\", error);\n                this.$message.error(\"获取待审核列表失败，请稍后重试\");\n            }\n        },\n\n    },\n};\n</script>\n\n<style scoped>\n.container {\n    padding: 20px;\n    background-color: #f9f9f9;\n}\n\n.header {\n    display: flex;\n    gap: 10px;\n    margin-bottom: 15px;\n}\n\n.header .el-input {\n    max-width: 300px;\n}\n\n.table-wrapper {\n    border: 1px solid #e0e0e0;\n    border-radius: 5px;\n    background-color: #ffffff;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n    padding: 10px;\n}\n</style>\n"],"mappings":";;;AA4BA,OAAAA,KAAA;AACA;EACAC,KAAA;IACA;MACAC,QAAA;MAAA;MACAC,WAAA;MACAC,SAAA;IACA;EACA;EACAC,QAAA,GACA;EACAC,QAAA;IACA,KAAAC,kBAAA;EACA;EACAC,OAAA;IACA;IACAC,OAAA;MACA;MACA,UAAAN,WAAA;QACA,KAAAO,QAAA,CAAAC,OAAA;QACA;MACA;;MAEA;MACA,KAAAP,SAAA,QAAAA,SAAA,CAAAQ,MAAA,CAAAC,IAAA,IACAA,IAAA,CAAAC,QAAA,CAAAC,WAAA,GAAAC,QAAA,MAAAb,WAAA,CAAAY,WAAA,GACA;IACA;IAEA;IACAE,MAAA;MACA,KAAAd,WAAA;MACA,KAAAI,kBAAA;IACA;IAEA,MAAAW,WAAA;MACA;QACA,MAAAC,QAAA,SAAAnB,KAAA,CAAAoB,GAAA;UACAC,YAAA;QACA;;QAEA;QACA,MAAAC,IAAA,OAAAC,IAAA,EAAAJ,QAAA,CAAAlB,IAAA;UAAAuB,IAAA;QAAA;;QAEA;QACA,MAAAC,IAAA,GAAAC,QAAA,CAAAC,aAAA;QACAF,IAAA,CAAAG,IAAA,GAAAC,GAAA,CAAAC,eAAA,CAAAR,IAAA;QACAG,IAAA,CAAAM,QAAA;QACAN,IAAA,CAAAO,KAAA;MACA,SAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,YAAAA,KAAA;QACA,KAAAvB,QAAA,CAAAuB,KAAA;MACA;IACA;IAEA;IACA,MAAA1B,mBAAA;MACA;QACA,OAAA4B,uBAAA,EAAAC,gBAAA,UAAAC,OAAA,CAAAC,GAAA,EACAtC,KAAA,CAAAoB,GAAA,kDACApB,KAAA,CAAAoB,GAAA,oCACA;QACA,IAAAe,uBAAA,CAAAlC,IAAA,CAAAsC,IAAA,YAAAH,gBAAA,CAAAI,MAAA;UACA,KAAApC,SAAA,GAAA+B,uBAAA,CAAAlC,IAAA,CAAAA,IAAA,CAAAwC,GAAA,CAAA5B,IAAA;YACA,MAAA6B,IAAA,GAAAN,gBAAA,CAAAnC,IAAA,CAAA0C,IAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAC,MAAA,KAAAhC,IAAA,CAAAgC,MAAA;YACA;cACA,GAAAhC,IAAA;cACAiC,QAAA,EAAAjC,IAAA,CAAAkC,WAAA;cACAjC,QAAA,EAAA4B,IAAA,GAAAA,IAAA,CAAA5B,QAAA;YACA;UACA;QACA;MACA,SAAAmB,KAAA;QACAC,OAAA,CAAAD,KAAA,eAAAA,KAAA;QACA,KAAAvB,QAAA,CAAAuB,KAAA;MACA;IACA;EAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
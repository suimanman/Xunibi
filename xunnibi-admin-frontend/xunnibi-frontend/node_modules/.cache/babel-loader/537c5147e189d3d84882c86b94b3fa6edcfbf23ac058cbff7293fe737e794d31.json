{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      searchQuery: null,\n      // 搜索关键词\n      teams: [],\n      // 团队数据列表\n      selectedTeamId: null,\n      // 选中的团队数据\n      dialogVisible: false,\n      newTeam: {\n        teamId: null,\n        teamName: \"\",\n        virtualCoins: 0,\n        creationDate: null\n      },\n      editMode: false\n    };\n  },\n  created() {\n    this.load(); // 页面加载时获取数据\n  },\n  methods: {\n    handleDialogClose() {\n      this.dialogVisible = false;\n    },\n    async load() {\n      try {\n        const response = await axios.get('http://localhost:8080/user/all');\n        if (response.status === 200 && response.data) {\n          console.log(\"用户数据:\", response.data);\n          this.teams = response.data; // 假设返回的数据包含团队列表\n          console.log(\"用户列表数据teams:\", this.teams);\n        } else {\n          console.error(\"服务器返回了不符合预期的响应\", response);\n        }\n      } catch (error) {\n        if (error.response) {\n          // 服务器响应了错误状态码\n          console.error(\"服务器错误:\", error.response.data);\n        } else if (error.request) {\n          // 请求没有收到响应\n          console.error(\"没有收到响应:\", error.request);\n        } else {\n          // 其他类型的错误（如请求配置错误）\n          console.error(\"请求错误:\", error.message);\n        }\n      }\n    },\n    async search() {\n      // 如果没有输入查询条件，提醒用户\n      if (!this.searchQuery) {\n        this.$message.error('请输入用户名字');\n        return;\n      }\n      try {\n        // 使用输入的团队 ID 调用后端接口\n        const response = await axios.get(`http://localhost:8080/user/${this.searchQuery}`);\n\n        // 成功获取数据后，更新表格数据\n        if (response.status === 200 && response.data) {\n          console.log(response.data);\n          this.teams = [response.data]; // 假设返回的是一个团队对象\n        } else if (!response.data) {\n          this.$message.error(\"没有这位用户\");\n        }\n      } catch (error) {\n        // 处理查询失败的情况\n        this.$message.error(\"查询失败\");\n        console.error(\"查询失败:\", error);\n      }\n    },\n    reset() {\n      // 重置搜索条件并重新加载数据\n      this.searchQuery = '';\n      this.load();\n    },\n    handleAdd() {\n      // 处理新增操作\n      console.log(\"新增用户\");\n      this.newTeam = {\n        teamId: null,\n        teamName: \"\",\n        virtualCoins: 0,\n        creationDate: null\n      };\n      this.editMode = false; // 设置为新增模式\n      this.dialogVisible = true; // 显示对话框\n    },\n    async del(teamId) {\n      try {\n        console.log(teamId);\n        await axios.delete(`http://localhost:8080/user/admindelete/${userId}`);\n        this.load(); // 删除后重新加载数据\n      } catch (error) {\n        console.error(\"删除失败:\", error);\n      }\n    },\n    handleEdit(row) {\n      console.log(row);\n      this.newTeam = {\n        ...row\n      };\n      this.editMode = true;\n      this.dialogVisible = true; // 显示对话框\n    },\n    handleDelete(index, row) {\n      console.log(index, row);\n    },\n    async saveTeam() {\n      try {\n        if (this.editMode) {\n          console.log(\"---------:\", this.editMode);\n          await axios.put(`http://localhost:8080/user/adminupdate/${this.newTeam.teamId}`, this.newTeam);\n          this.$message.success(\"更新成功\");\n        } else {\n          console.log(\"---------: 新增\", this.editMode);\n          await axios.post('http://localhost:8080/user/admincreate', this.newTeam);\n          this.$message.success(\"新增成功\");\n        }\n        this.dialogVisible = false;\n        this.load(); // 保存后重新加载数据\n      } catch (error) {\n        this.$message.error(this.editMode ? \"更新失败\" : \"新增失败\");\n        console.error(this.editMode ? \"更新失败\" : \"新增失败\", error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","searchQuery","teams","selectedTeamId","dialogVisible","newTeam","teamId","teamName","virtualCoins","creationDate","editMode","created","load","methods","handleDialogClose","response","get","status","console","log","error","request","message","search","$message","reset","handleAdd","del","delete","userId","handleEdit","row","handleDelete","index","saveTeam","put","success","post"],"sources":["src/views/manage/UserView.vue"],"sourcesContent":["<template>\n    <div>\n        <div class=\"search\">\n            <el-input v-model=\"searchQuery\" placeholder=\"请输入用户名称查询\" style=\"width: 200px\"></el-input>\n            <el-button type=\"info\" plain style=\"margin-left: 10px\" @click=\"search\">查询</el-button>\n            <el-button type=\"warning\" plain style=\"margin-left: 10px\" @click=\"reset\">重置</el-button>\n            <el-button type=\"primary\" plain @click=\"handleAdd\">新增</el-button>\n        </div>\n        <div class=\"table\">\n            <el-table :data=\"teams\" @selection-change=\"handleSelectionChange\">\n                <el-table-column prop=\"userId\" label=\"用户ID\" sortable></el-table-column>\n                <el-table-column prop=\"username\" label=\"用户名\"></el-table-column>\n                <el-table-column prop=\"password\" label=\"用户密码\"></el-table-column>\n                <el-table-column prop=\"role\" label=\"用户身份\"></el-table-column>\n                <el-table-column prop=\"teamId\" label=\"用户所属团队Id\"></el-table-column>\n                <el-table-column prop=\"teamName\" label=\"用户所属团队名称\"></el-table-column>\n                <el-table-column label=\"操作\">\n                    <template v-slot=\"scope\">\n                        <el-button size=\"mini\" type=\"primary\" plain @click=\"handleEdit(scope.row)\">编辑</el-button>\n                        <el-button size=\"mini\" type=\"danger\" plain @click=\"del(scope.row.userId)\">删除</el-button>\n                    </template>\n                </el-table-column>\n            </el-table>\n        </div>\n\n        <el-dialog :title=\"editMode ? '编辑团队' : '新增团队'\" :visible=\"dialogVisible\" @close=\"handleDialogClose\">\n            <el-form :model=\"newTeam\">\n                <el-form-item label=\"用户名\">\n                    <el-input v-model=\"newTeam.teamName\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"用户密码\">\n                    <el-input v-model=\"newTeam.virtualCoins\" type=\"number\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"入住日期\">\n                    <el-date-picker v-model=\"newTeam.creationDate\" type=\"date\" placeholder=\"选择日期\"></el-date-picker>\n                </el-form-item>\n            </el-form>\n            <div slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click=\"dialogVisible = false\">取消</el-button>\n                <el-button type=\"primary\" @click=\"saveTeam\">保存</el-button>\n            </div>\n        </el-dialog>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n    data() {\n        return {\n            searchQuery: null, // 搜索关键词\n            teams: [\n\n            ], // 团队数据列表\n            selectedTeamId: null, // 选中的团队数据\n            dialogVisible: false,\n            newTeam: {\n                teamId: null,\n                teamName: \"\",\n                virtualCoins: 0,\n                creationDate: null,\n            },\n            editMode: false,\n        };\n    },\n    created() {\n        this.load(); // 页面加载时获取数据\n    },\n    methods: {\n        handleDialogClose() {\n            this.dialogVisible = false;\n        },\n        async load() {\n            try {\n                const response = await axios.get('http://localhost:8080/user/all');\n                if (response.status === 200 && response.data) {\n                    console.log(\"用户数据:\", response.data);\n                    this.teams = response.data; // 假设返回的数据包含团队列表\n                    console.log(\"用户列表数据teams:\", this.teams);\n                } else {\n                    console.error(\"服务器返回了不符合预期的响应\", response);\n                }\n            } catch (error) {\n                if (error.response) {\n                    // 服务器响应了错误状态码\n                    console.error(\"服务器错误:\", error.response.data);\n                } else if (error.request) {\n                    // 请求没有收到响应\n                    console.error(\"没有收到响应:\", error.request);\n                } else {\n                    // 其他类型的错误（如请求配置错误）\n                    console.error(\"请求错误:\", error.message);\n                }\n            }\n        }\n        ,\n        async search() {\n\n            // 如果没有输入查询条件，提醒用户\n            if (!this.searchQuery) {\n                this.$message.error('请输入用户名字');\n                return;\n            }\n\n            try {\n                // 使用输入的团队 ID 调用后端接口\n                const response = await axios.get(`http://localhost:8080/user/${this.searchQuery}`);\n\n                // 成功获取数据后，更新表格数据\n                if (response.status === 200 && response.data) {\n                    console.log(response.data);\n                    this.teams = [response.data];  // 假设返回的是一个团队对象\n                } else if (!response.data) {\n                    this.$message.error(\"没有这位用户\");\n                }\n            } catch (error) {\n                // 处理查询失败的情况\n                this.$message.error(\"查询失败\");\n                console.error(\"查询失败:\", error);\n            }\n        },\n        reset() {\n            // 重置搜索条件并重新加载数据\n            this.searchQuery = '';\n            this.load();\n        },\n        handleAdd() {\n            // 处理新增操作\n            console.log(\"新增用户\");\n            this.newTeam = {\n                teamId: null,\n                teamName: \"\",\n                virtualCoins: 0,\n                creationDate: null,\n            };\n            this.editMode = false;  // 设置为新增模式\n            this.dialogVisible = true; // 显示对话框\n        },\n        async del(teamId) {\n            try {\n                console.log(teamId);\n                await axios.delete(`http://localhost:8080/user/admindelete/${userId}`);\n\n                this.load(); // 删除后重新加载数据\n            } catch (error) {\n                console.error(\"删除失败:\", error);\n            }\n        },\n        handleEdit(row) {\n            console.log(row);\n            this.newTeam = { ...row }\n            this.editMode = true;\n            this.dialogVisible = true; // 显示对话框\n        },\n        handleDelete(index, row) {\n            console.log(index, row);\n        },\n        async saveTeam() {\n            try {\n                if (this.editMode) {\n                    console.log(\"---------:\", this.editMode)\n                    await axios.put(`http://localhost:8080/user/adminupdate/${this.newTeam.teamId}`, this.newTeam);\n                    this.$message.success(\"更新成功\");\n                } else {\n                    console.log(\"---------: 新增\", this.editMode)\n                    await axios.post('http://localhost:8080/user/admincreate', this.newTeam);\n                    this.$message.success(\"新增成功\");\n                }\n                this.dialogVisible = false;\n                this.load(); // 保存后重新加载数据\n\n\n            } catch (error) {\n                this.$message.error(this.editMode ? \"更新失败\" : \"新增失败\");\n                console.error(this.editMode ? \"更新失败\" : \"新增失败\", error);\n            }\n        }\n\n    },\n};\n</script>\n\n<style scoped>\n.search,\n.operation {\n    margin-bottom: 15px;\n}\n\n\n.search,\n.operation {\n    display: flex;\n    align-items: center;\n    margin-bottom: 15px;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
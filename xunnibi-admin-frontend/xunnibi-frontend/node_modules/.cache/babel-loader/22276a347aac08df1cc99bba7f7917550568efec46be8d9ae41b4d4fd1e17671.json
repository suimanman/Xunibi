{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      searchQuery: null,\n      // 搜索关键词\n      users: [],\n      teamList: [],\n      // 存储团队数据列表\n      selectedTeamId: null,\n      // 选中的团队数据\n      dialogVisible: false,\n      newUser: {\n        userId: null,\n        username: \"\",\n        password: null,\n        role: null,\n        teamId: null\n      },\n      editMode: false\n    };\n  },\n  created() {\n    this.load(); // 页面加载时获取数据\n  },\n  methods: {\n    getRoleLabel(role) {\n      switch (role) {\n        case \"leader\":\n          return \"队长\";\n        case \"member\":\n          return \"队员\";\n      }\n    },\n    handleDialogClose() {\n      this.dialogVisible = false;\n    },\n    async load() {\n      try {\n        // 并行请求用户数据和团队数据\n        const [userResponse, teamResponse] = await Promise.all([axios.get('http://localhost:8080/user/all'), axios.get('http://localhost:8080/team/list')]);\n\n        // 校验响应是否成功\n        if (userResponse.status === 200 && teamResponse.status === 200) {\n          const users = userResponse.data.data; // 假设用户数据在 data.data\n          const teams = teamResponse.data; // 假设团队数据在 data.data\n          this.teamList = teams; // 存储团队数据\n          // console.log(\"用户数据:\", users);\n          // console.log(\"团队数据:\", teams);\n\n          // 用团队数据创建一个映射表（teamId -> teamName）\n          const teamMap = {};\n          teams.forEach(team => {\n            teamMap[team.teamId] = team.teamName;\n          });\n\n          // 为每个用户添加对应的团队名称\n          const enrichedUsers = users.map(user => {\n            return {\n              ...user,\n              teamName: teamMap[user.teamId] || \"未分配团队\" // 如果没有匹配团队，显示“未分配团队”\n            };\n          });\n\n          // 更新表格数据\n          this.users = enrichedUsers;\n        } else {\n          console.error(\"服务器返回了不符合预期的响应\", userResponse, teamResponse);\n        }\n      } catch (error) {\n        // 错误处理\n        if (error.response) {\n          console.error(\"服务器错误:\", error.response.data);\n        } else if (error.request) {\n          console.error(\"没有收到响应:\", error.request);\n        } else {\n          console.error(\"请求错误:\", error.message);\n        }\n      }\n    },\n    async search() {\n      // 如果没有输入查询条件，提醒用户\n      if (!this.searchQuery) {\n        this.$message.error('请输入用户名字');\n        return;\n      }\n      try {\n        // 使用输入的团队 ID 调用后端接口\n        const response = await axios.get(`http://localhost:8080/user/${this.searchQuery}`);\n\n        // 成功获取数据后，更新表格数据\n        if (response.status === 200 && response.data) {\n          console.log(response.data);\n          this.users = [response.data.data]; // 假设返回的是一个团队对象\n        } else if (!response.data) {\n          this.$message.error(\"没有这位用户\");\n        }\n      } catch (error) {\n        // 处理查询失败的情况\n        this.$message.error(\"查询失败\");\n        console.error(\"查询失败:\", error);\n      }\n    },\n    reset() {\n      // 重置搜索条件并重新加载数据\n      this.searchQuery = '';\n      this.load();\n    },\n    handleAdd() {\n      // 处理新增操作\n      console.log(\"新增用户\");\n      this.newUser = {\n        userId: null,\n        username: \"\",\n        password: null,\n        role: null,\n        teamId: null\n      };\n      this.editMode = false; // 设置为新增模式\n      this.dialogVisible = true; // 显示对话框\n    },\n    async del(userId) {\n      try {\n        console.log(userId);\n        const response = await axios.delete(`http://localhost:8080/user/admindelete/${userId}`);\n        if (response.status === 200) {\n          this.$message.success(response.data.msg);\n        } else {\n          this.$message.error(response.data.msg);\n        }\n        this.load(); // 删除后重新加载数据\n      } catch (error) {\n        console.error(\"删除失败:\", error);\n      }\n    },\n    handleEdit(row) {\n      console.log(row);\n      this.newUser = {\n        ...row\n      };\n      this.editMode = true;\n      this.dialogVisible = true; // 显示对话框\n    },\n    handleDelete(index, row) {\n      console.log(index, row);\n    },\n    async saveTeam() {\n      try {\n        if (this.editMode) {\n          console.log(\"---------:\", this.editMode);\n          console.log(\"新用户:\", this.newUser);\n          await axios.put(`http://localhost:8080/user/adminupdate/${this.newUser.userId}`, this.newUser);\n          this.$message.success(\"更新成功\");\n        } else {\n          console.log(\"---------: 新增\", this.editMode);\n          console.log(\"新用户:\", this.newUser);\n          await axios.post('http://localhost:8080/user/admincreate', this.newUser);\n          this.$message.success(\"新增成功\");\n        }\n        this.dialogVisible = false;\n        this.load(); // 保存后重新加载数据\n      } catch (error) {\n        this.$message.error(this.editMode ? \"更新失败\" : \"新增失败\");\n        console.error(this.editMode ? \"更新失败\" : \"新增失败\", error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","searchQuery","users","teamList","selectedTeamId","dialogVisible","newUser","userId","username","password","role","teamId","editMode","created","load","methods","getRoleLabel","handleDialogClose","userResponse","teamResponse","Promise","all","get","status","teams","teamMap","forEach","team","teamName","enrichedUsers","map","user","console","error","response","request","message","search","$message","log","reset","handleAdd","del","delete","success","msg","handleEdit","row","handleDelete","index","saveTeam","put","post"],"sources":["src/views/manage/UserView.vue"],"sourcesContent":["<template>\n    <div>\n        <div class=\"search\">\n            <el-input v-model=\"searchQuery\" placeholder=\"请输入用户名称查询\" style=\"width: 200px\"></el-input>\n            <el-button type=\"info\" plain style=\"margin-left: 10px\" @click=\"search\" icon=\"el-icon-zoom-in\">查询</el-button>\n            <el-button type=\"warning\" plain style=\"margin-left: 10px\" @click=\"reset\"\n                icon=\"el-icon-refresh-left\">重置</el-button>\n            <el-button type=\"primary\" plain @click=\"handleAdd\">新增</el-button>\n        </div>\n        <div class=\"table\">\n            <el-table :data=\"users\" @selection-change=\"handleSelectionChange\" border>\n                <el-table-column prop=\"userId\" label=\"用户ID\" sortable></el-table-column>\n                <el-table-column prop=\"username\" label=\"用户名\"></el-table-column>\n                <el-table-column prop=\"password\" label=\"用户密码\"></el-table-column>\n                <el-table-column prop=\"role\" label=\"用户身份\">\n                    <template slot-scope=\"scope\">\n                        <span>{{ getRoleLabel(scope.row.role) }}</span>\n                    </template>\n                </el-table-column>\n                <el-table-column prop=\"teamId\" label=\"用户所属团队Id\"></el-table-column>\n                <el-table-column prop=\"teamName\" label=\"用户所属团队名称\"></el-table-column>\n                <el-table-column label=\"操作\">\n                    <template v-slot=\"scope\">\n                        <el-button size=\"mini\" type=\"primary\" plain @click=\"handleEdit(scope.row)\">编辑</el-button>\n                        <el-button size=\"mini\" type=\"danger\" plain @click=\"del(scope.row.userId)\">删除</el-button>\n                    </template>\n                </el-table-column>\n            </el-table>\n\n          \n        </div>\n\n        <el-dialog :title=\"editMode ? '编辑用户' : '新增用户'\" :visible.sync=\"dialogVisible\" @close=\"handleDialogClose\">\n            <el-form :model=\"newUser\" label-width=\"100px\">\n                <el-form-item label=\"用户名\">\n                    <el-input v-model=\"newUser.username\" placeholder=\"请输入用户名\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"用户密码\">\n                    <el-input v-model=\"newUser.password\" type=\"password\" placeholder=\"请输入密码\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"用户角色\">\n                    <el-select v-model=\"newUser.role\" placeholder=\"请选择角色\" style=\"width: 100%;\">\n                        <el-option label=\"队长\" value=\"leader\"></el-option>\n                        <el-option label=\"队员\" value=\"member\"></el-option>\n                    </el-select>\n                </el-form-item>\n                <el-form-item label=\"所属团队\">\n                    <el-select v-model=\"newUser.teamId\" placeholder=\"请选择团队\" style=\"width: 100%;\">\n                        <el-option v-for=\"team in teamList\" :key=\"team.teamId\" :label=\"team.teamName\"\n                            :value=\"team.teamId\"></el-option>\n                    </el-select>\n                </el-form-item>\n            </el-form>\n            <div slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click=\"dialogVisible = false\">取消</el-button>\n                <el-button type=\"primary\" @click=\"saveTeam\">保存</el-button>\n            </div>\n        </el-dialog>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n    data() {\n        return {\n            searchQuery: null, // 搜索关键词\n            users: [\n\n            ],\n            teamList: [], // 存储团队数据列表\n            selectedTeamId: null, // 选中的团队数据\n            dialogVisible: false,\n            newUser: {\n                userId: null,\n                username: \"\",\n                password: null,\n                role: null,\n                teamId: null,\n\n            },\n            editMode: false,\n        };\n    },\n    created() {\n        this.load(); // 页面加载时获取数据\n    },\n    methods: {\n\n        getRoleLabel(role) {\n            switch (role) {\n                case \"leader\": return \"队长\";\n                case \"member\": return \"队员\";\n            }\n        },\n\n        handleDialogClose() {\n            this.dialogVisible = false;\n        },\n\n        async load() {\n            try {\n                // 并行请求用户数据和团队数据\n                const [userResponse, teamResponse] = await Promise.all([\n                    axios.get('http://localhost:8080/user/all'),\n                    axios.get('http://localhost:8080/team/list'),\n                ]);\n\n                // 校验响应是否成功\n                if (userResponse.status === 200 && teamResponse.status === 200) {\n                    const users = userResponse.data.data; // 假设用户数据在 data.data\n                    const teams = teamResponse.data; // 假设团队数据在 data.data\n                    this.teamList = teams; // 存储团队数据\n                    // console.log(\"用户数据:\", users);\n                    // console.log(\"团队数据:\", teams);\n\n                    // 用团队数据创建一个映射表（teamId -> teamName）\n                    const teamMap = {};\n                    teams.forEach((team) => {\n                        teamMap[team.teamId] = team.teamName;\n                    });\n\n                    // 为每个用户添加对应的团队名称\n                    const enrichedUsers = users.map((user) => {\n                        return {\n                            ...user,\n                            teamName: teamMap[user.teamId] || \"未分配团队\", // 如果没有匹配团队，显示“未分配团队”\n                        };\n                    });\n\n                    // 更新表格数据\n                    this.users = enrichedUsers;\n                } else {\n                    console.error(\"服务器返回了不符合预期的响应\", userResponse, teamResponse);\n                }\n            } catch (error) {\n                // 错误处理\n                if (error.response) {\n                    console.error(\"服务器错误:\", error.response.data);\n                } else if (error.request) {\n                    console.error(\"没有收到响应:\", error.request);\n                } else {\n                    console.error(\"请求错误:\", error.message);\n                }\n            }\n        }\n\n        ,\n        async search() {\n\n            // 如果没有输入查询条件，提醒用户\n            if (!this.searchQuery) {\n                this.$message.error('请输入用户名字');\n                return;\n            }\n\n            try {\n                // 使用输入的团队 ID 调用后端接口\n                const response = await axios.get(`http://localhost:8080/user/${this.searchQuery}`);\n\n                // 成功获取数据后，更新表格数据\n                if (response.status === 200 && response.data) {\n                    console.log(response.data);\n                    this.users = [response.data.data];  // 假设返回的是一个团队对象\n                } else if (!response.data) {\n                    this.$message.error(\"没有这位用户\");\n                }\n            } catch (error) {\n                // 处理查询失败的情况\n                this.$message.error(\"查询失败\");\n                console.error(\"查询失败:\", error);\n            }\n        },\n        reset() {\n            // 重置搜索条件并重新加载数据\n            this.searchQuery = '';\n            this.load();\n        },\n        handleAdd() {\n            // 处理新增操作\n            console.log(\"新增用户\");\n            this.newUser = {\n                userId: null,\n                username: \"\",\n                password: null,\n                role: null,\n                teamId: null,\n            };\n            this.editMode = false;  // 设置为新增模式\n            this.dialogVisible = true; // 显示对话框\n        },\n        async del(userId) {\n            try {\n                console.log(userId);\n                const response = await axios.delete(`http://localhost:8080/user/admindelete/${userId}`);\n                if (response.status === 200) {\n                    this.$message.success(response.data.msg);\n                } else {\n                    this.$message.error(response.data.msg);\n                }\n                this.load(); // 删除后重新加载数据\n            } catch (error) {\n                console.error(\"删除失败:\", error);\n            }\n        },\n        handleEdit(row) {\n            console.log(row);\n            this.newUser = { ...row }\n            this.editMode = true;\n            this.dialogVisible = true; // 显示对话框\n        },\n        handleDelete(index, row) {\n            console.log(index, row);\n        },\n        async saveTeam() {\n            try {\n                if (this.editMode) {\n                    console.log(\"---------:\", this.editMode)\n                    console.log(\"新用户:\", this.newUser)\n                    await axios.put(`http://localhost:8080/user/adminupdate/${this.newUser.userId}`, this.newUser);\n                    this.$message.success(\"更新成功\");\n                } else {\n                    console.log(\"---------: 新增\", this.editMode)\n                    console.log(\"新用户:\", this.newUser)\n                    await axios.post('http://localhost:8080/user/admincreate', this.newUser);\n                    this.$message.success(\"新增成功\");\n                }\n                this.dialogVisible = false;\n                this.load(); // 保存后重新加载数据\n\n\n            } catch (error) {\n                this.$message.error(this.editMode ? \"更新失败\" : \"新增失败\");\n                console.error(this.editMode ? \"更新失败\" : \"新增失败\", error);\n            }\n        }\n\n    },\n};\n</script>\n\n<style scoped>\n.search,\n.operation {\n    margin-bottom: 15px;\n}\n\n\n.search,\n.operation {\n    display: flex;\n    align-items: center;\n    margin-bottom: 15px;\n}\n\n.table {\n    border: 1px solid #e0e0e0;\n    border-radius: 5px;\n    background-color: #ffffff;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n    padding: 10px;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
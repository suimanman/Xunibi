{"ast":null,"code":"import * as echarts from \"echarts\";\nexport default {\n  props: {\n    chartData: {\n      type: Array,\n      required: true\n    }\n  },\n  data() {\n    return {\n      IncomeChart: null\n    };\n  },\n  mounted() {\n    // window.onload = () => {\n    //     this.initChart(); // 在窗口完全加载后初始化图表\n    // };\n    this.$nextTick(() => {\n      this.initChart(); // 等待 DOM 渲染完成后初始化图表\n    });\n  },\n  methods: {\n    initChart() {\n      const chartDom = this.$refs.IncomeChart;\n      this.IncomeChart = echarts.init(chartDom);\n      const option = {\n        legend: {},\n        tooltip: {\n          trigger: \"axis\",\n          showContent: false\n        },\n        dataset: {\n          source: this.chartData\n        },\n        xAxis: {\n          type: \"category\"\n        },\n        yAxis: {\n          gridIndex: 0\n        },\n        grid: {\n          top: \"55%\"\n        },\n        series: [{\n          type: \"line\",\n          smooth: true,\n          seriesLayoutBy: \"row\",\n          emphasis: {\n            focus: \"series\"\n          }\n        }, {\n          type: \"line\",\n          smooth: true,\n          seriesLayoutBy: \"row\",\n          emphasis: {\n            focus: \"series\"\n          }\n        }, {\n          type: \"line\",\n          smooth: true,\n          seriesLayoutBy: \"row\",\n          emphasis: {\n            focus: \"series\"\n          }\n        }, {\n          type: \"line\",\n          smooth: true,\n          seriesLayoutBy: \"row\",\n          emphasis: {\n            focus: \"series\"\n          }\n        }, {\n          type: \"pie\",\n          id: \"pie\",\n          radius: \"30%\",\n          center: [\"50%\", \"25%\"],\n          emphasis: {\n            focus: \"self\"\n          },\n          label: {\n            formatter: \"{b}: {@currentMonth} ({d}%)\"\n          },\n          encode: {\n            itemName: \"product\",\n            value: \"currentMonth\",\n            tooltip: \"currentMonth\"\n          }\n        }]\n      };\n      this.IncomeChart.setOption(option);\n      this.IncomeChart.on(\"updateAxisPointer\", event => {\n        const xAxisInfo = event.axesInfo[0];\n        if (xAxisInfo) {\n          const dimension = xAxisInfo.value + 1;\n          this.IncomeChart.setOption({\n            series: {\n              id: \"pie\",\n              label: {\n                formatter: \"{b}: {@[\" + dimension + \"]} ({d}%)\"\n              },\n              encode: {\n                value: dimension,\n                tooltip: dimension\n              }\n            }\n          });\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["echarts","props","chartData","type","Array","required","data","IncomeChart","mounted","$nextTick","initChart","methods","chartDom","$refs","init","option","legend","tooltip","trigger","showContent","dataset","source","xAxis","yAxis","gridIndex","grid","top","series","smooth","seriesLayoutBy","emphasis","focus","id","radius","center","label","formatter","encode","itemName","value","setOption","on","event","xAxisInfo","axesInfo","dimension"],"sources":["src/components/IncomeComponent.vue"],"sourcesContent":["<template>\n    <div ref=\"IncomeChart\" style=\"width: 100%;height: 600px;\"></div>\n</template>\n\n<script>\nimport * as echarts from \"echarts\";\n\nexport default {\n    props: {\n        chartData: {\n            type: Array,\n            required: true,\n        },\n    },\n    data() {\n        return {\n            IncomeChart: null,\n        };\n    },\n    mounted() {\n        // window.onload = () => {\n        //     this.initChart(); // 在窗口完全加载后初始化图表\n        // };\n        this.$nextTick(() => {\n            this.initChart(); // 等待 DOM 渲染完成后初始化图表\n        });\n\n\n\n    },\n    methods: {\n        initChart() {\n            const chartDom = this.$refs.IncomeChart;\n            this.IncomeChart = echarts.init(chartDom);\n\n            const option = {\n                legend: {},\n                tooltip: {\n                    trigger: \"axis\",\n                    showContent: false,\n                },\n                dataset: {\n                    source: this.chartData,\n                },\n                xAxis: { type: \"category\" },\n                yAxis: { gridIndex: 0 },\n                grid: { top: \"55%\" },\n                series: [\n                    { type: \"line\", smooth: true, seriesLayoutBy: \"row\", emphasis: { focus: \"series\" } },\n                    { type: \"line\", smooth: true, seriesLayoutBy: \"row\", emphasis: { focus: \"series\" } },\n                    { type: \"line\", smooth: true, seriesLayoutBy: \"row\", emphasis: { focus: \"series\" } },\n                    { type: \"line\", smooth: true, seriesLayoutBy: \"row\", emphasis: { focus: \"series\" } },\n                    {\n                        type: \"pie\",\n                        id: \"pie\",\n                        radius: \"30%\",\n                        center: [\"50%\", \"25%\"],\n                        emphasis: { focus: \"self\" },\n                        label: { formatter: \"{b}: {@currentMonth} ({d}%)\" },\n                        encode: { itemName: \"product\", value: \"currentMonth\", tooltip: \"currentMonth\" },\n                    },\n                ],\n            };\n\n            this.IncomeChart.setOption(option);\n\n            this.IncomeChart.on(\"updateAxisPointer\", (event) => {\n                const xAxisInfo = event.axesInfo[0];\n                if (xAxisInfo) {\n                    const dimension = xAxisInfo.value + 1;\n                    this.IncomeChart.setOption({\n                        series: {\n                            id: \"pie\",\n                            label: { formatter: \"{b}: {@[\" + dimension + \"]} ({d}%)\" },\n                            encode: { value: dimension, tooltip: dimension },\n                        },\n                    });\n                }\n            });\n        },\n    },\n};\n</script>\n\n<style scoped></style>\n"],"mappings":"AAKA,YAAAA,OAAA;AAEA;EACAC,KAAA;IACAC,SAAA;MACAC,IAAA,EAAAC,KAAA;MACAC,QAAA;IACA;EACA;EACAC,KAAA;IACA;MACAC,WAAA;IACA;EACA;EACAC,QAAA;IACA;IACA;IACA;IACA,KAAAC,SAAA;MACA,KAAAC,SAAA;IACA;EAIA;EACAC,OAAA;IACAD,UAAA;MACA,MAAAE,QAAA,QAAAC,KAAA,CAAAN,WAAA;MACA,KAAAA,WAAA,GAAAP,OAAA,CAAAc,IAAA,CAAAF,QAAA;MAEA,MAAAG,MAAA;QACAC,MAAA;QACAC,OAAA;UACAC,OAAA;UACAC,WAAA;QACA;QACAC,OAAA;UACAC,MAAA,OAAAnB;QACA;QACAoB,KAAA;UAAAnB,IAAA;QAAA;QACAoB,KAAA;UAAAC,SAAA;QAAA;QACAC,IAAA;UAAAC,GAAA;QAAA;QACAC,MAAA,GACA;UAAAxB,IAAA;UAAAyB,MAAA;UAAAC,cAAA;UAAAC,QAAA;YAAAC,KAAA;UAAA;QAAA,GACA;UAAA5B,IAAA;UAAAyB,MAAA;UAAAC,cAAA;UAAAC,QAAA;YAAAC,KAAA;UAAA;QAAA,GACA;UAAA5B,IAAA;UAAAyB,MAAA;UAAAC,cAAA;UAAAC,QAAA;YAAAC,KAAA;UAAA;QAAA,GACA;UAAA5B,IAAA;UAAAyB,MAAA;UAAAC,cAAA;UAAAC,QAAA;YAAAC,KAAA;UAAA;QAAA,GACA;UACA5B,IAAA;UACA6B,EAAA;UACAC,MAAA;UACAC,MAAA;UACAJ,QAAA;YAAAC,KAAA;UAAA;UACAI,KAAA;YAAAC,SAAA;UAAA;UACAC,MAAA;YAAAC,QAAA;YAAAC,KAAA;YAAAtB,OAAA;UAAA;QACA;MAEA;MAEA,KAAAV,WAAA,CAAAiC,SAAA,CAAAzB,MAAA;MAEA,KAAAR,WAAA,CAAAkC,EAAA,sBAAAC,KAAA;QACA,MAAAC,SAAA,GAAAD,KAAA,CAAAE,QAAA;QACA,IAAAD,SAAA;UACA,MAAAE,SAAA,GAAAF,SAAA,CAAAJ,KAAA;UACA,KAAAhC,WAAA,CAAAiC,SAAA;YACAb,MAAA;cACAK,EAAA;cACAG,KAAA;gBAAAC,SAAA,eAAAS,SAAA;cAAA;cACAR,MAAA;gBAAAE,KAAA,EAAAM,SAAA;gBAAA5B,OAAA,EAAA4B;cAAA;YACA;UACA;QACA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
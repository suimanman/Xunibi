{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      searchQuery: \"\",\n      // 查询字段\n      tableData: [],\n      // 当前页的数据\n      currentPage: 1,\n      // 当前页码\n      pageSize: 10,\n      // 每页显示条数\n      total: 0,\n      // 总记录数\n      dialogVisible: false,\n      // 弹窗显示控制\n      selectedRow: null // 当前选中的行\n    };\n  },\n  mounted() {\n    this.getAllDutyRecords(); // 初次加载获取所有记录\n  },\n  methods: {\n    async getAllDutyRecords() {\n      try {\n        const [DutyListResponse, teamListResponse] = await Promise.all([axios.get(\"http://localhost:8080/dutyrecords/all\"), axios.get(\"http://localhost:8080/team/list\")]);\n        if (DutyListResponse.data.code === 200 && teamListResponse.status === 200) {\n          const fullData = DutyListResponse.data.data.map(item => {\n            const team = teamListResponse.data.find(t => t.teamId === item.teamId);\n            return {\n              ...item,\n              teamName: team ? team.teamName : \"未知\"\n            };\n          });\n          this.total = fullData.length; // 更新总记录数\n          this.tableData = this.paginate(fullData); // 分页显示数据\n        }\n      } catch (error) {\n        console.error(\"获取待审核列表失败:\", error);\n        this.$message.error(\"获取待审核列表失败，请稍后重试\");\n      }\n    },\n    paginate(data) {\n      const start = (this.currentPage - 1) * this.pageSize;\n      const end = this.currentPage * this.pageSize;\n      return data.slice(start, end);\n    },\n    handlePageChange(page) {\n      this.currentPage = page;\n      this.getAllDutyRecords();\n    },\n    handleSizeChange(size) {\n      this.pageSize = size;\n      this.currentPage = 1; // 重置到第一页\n      this.getAllDutyRecords();\n    },\n    search() {\n      if (!this.searchQuery) {\n        this.$message.warning(\"请输入团队名称查询\");\n        return;\n      }\n\n      // 根据团队名称过滤数据\n      this.tableData = this.tableData.filter(item => item.teamName.toLowerCase().includes(this.searchQuery.toLowerCase()));\n    },\n    reset() {\n      this.searchQuery = \"\";\n      this.currentPage = 1; // 重置到第一页\n      this.getAllDutyRecords();\n    },\n    openDialog(row) {\n      this.selectedRow = row;\n      this.dialogVisible = true;\n    },\n    handlePass() {\n      if (!this.selectedRow) return;\n      axios.put(\"http://localhost:8080/dutyrecords/update\", {\n        dutyId: this.selectedRow.dutyId,\n        status: \"已通过\"\n      }).then(response => {\n        if (response.data.code === 200) {\n          this.$message.success(\"审核通过成功\");\n          this.selectedRow.status = \"已通过\";\n          this.dialogVisible = false;\n        } else {\n          this.$message.error(response.data.msg || \"审核失败\");\n        }\n      }).catch(error => {\n        console.error(\"审核失败:\", error);\n        this.$message.error(\"审核失败，请稍后重试\");\n      });\n    },\n    handleNoPass(row) {\n      axios.put(\"http://localhost:8080/dutyrecords/update\", {\n        dutyId: row.dutyId,\n        status: \"未通过\"\n      }).then(response => {\n        if (response.data.code === 200) {\n          this.$message.success(\"审核不通过成功\");\n          row.status = \"未通过\";\n        } else {\n          this.$message.error(response.data.msg || \"操作失败\");\n        }\n      }).catch(error => {\n        console.error(\"操作失败:\", error);\n        this.$message.error(\"操作失败，请稍后重试\");\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","searchQuery","tableData","currentPage","pageSize","total","dialogVisible","selectedRow","mounted","getAllDutyRecords","methods","DutyListResponse","teamListResponse","Promise","all","get","code","status","fullData","map","item","team","find","t","teamId","teamName","length","paginate","error","console","$message","start","end","slice","handlePageChange","page","handleSizeChange","size","search","warning","filter","toLowerCase","includes","reset","openDialog","row","handlePass","put","dutyId","then","response","success","msg","catch","handleNoPass"],"sources":["src/views/manage/DutyRecordView.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <div class=\"header\">\n      <el-input v-model=\"searchQuery\" placeholder=\"请输入团队名称查看\" style=\"width: 250px\"></el-input>\n      <el-button type=\"info\" plain @click=\"search\" icon=\"el-icon-zoom-in\">查询</el-button>\n      <el-button type=\"warning\" plain @click=\"reset\" icon=\"el-icon-refresh-left\">重置</el-button>\n    </div>\n\n    <div class=\"table-wrapper\">\n      <el-table ref=\"filterTable\" :data=\"tableData\" style=\"width: 100%\" border>\n        <el-table-column prop=\"dutyId\" label=\"值班记录 ID\" align=\"center\" width=\"100px\" />\n        <el-table-column prop=\"teamId\" label=\"团队 ID\" align=\"center\" />\n        <el-table-column prop=\"teamName\" label=\"团队名称\" align=\"center\" />\n        <el-table-column prop=\"dutyDate\" label=\"值班日期\" align=\"center\" />\n        <el-table-column prop=\"coinAwarded\" label=\"奖励虚拟币\" align=\"center\" />\n        <el-table-column prop=\"description\" label=\"描述\" align=\"center\" />\n        <el-table-column prop=\"status\" label=\"状态\" align=\"center\" />\n        <el-table-column prop=\"image\" label=\"图片\" align=\"center\">\n          <template v-slot=\"scope\">\n            <img :src=\"scope.row.image\" alt=\"值班图片\" style=\"max-width: 100px; max-height: 100px;\" />\n          </template>\n        </el-table-column>\n      </el-table>\n      <el-pagination\n          background\n          layout=\"sizes, prev, pager, next, total\"\n          :current-page=\"currentPage\"\n          :page-size=\"pageSize\"\n          :total=\"total\"\n          @current-change=\"handlePageChange\"\n          @size-change=\"handleSizeChange\">\n      </el-pagination>\n    </div>\n  </div>\n</template>\n<script>\nimport axios from \"axios\";\n\nexport default {\n  data() {\n    return {\n      searchQuery: \"\", // 查询字段\n      tableData: [], // 当前页的数据\n      currentPage: 1, // 当前页码\n      pageSize: 10, // 每页显示条数\n      total: 0, // 总记录数\n      dialogVisible: false, // 弹窗显示控制\n      selectedRow: null, // 当前选中的行\n    };\n  },\n  mounted() {\n    this.getAllDutyRecords(); // 初次加载获取所有记录\n  },\n  methods: {\n    async getAllDutyRecords() {\n      try {\n        const [DutyListResponse, teamListResponse] = await Promise.all([\n          axios.get(\"http://localhost:8080/dutyrecords/all\"),\n          axios.get(\"http://localhost:8080/team/list\"),\n        ]);\n        if (DutyListResponse.data.code === 200 && teamListResponse.status === 200) {\n          const fullData = DutyListResponse.data.data.map((item) => {\n            const team = teamListResponse.data.find((t) => t.teamId === item.teamId);\n            return {\n              ...item,\n              teamName: team ? team.teamName : \"未知\",\n            };\n          });\n\n          this.total = fullData.length; // 更新总记录数\n          this.tableData = this.paginate(fullData); // 分页显示数据\n        }\n      } catch (error) {\n        console.error(\"获取待审核列表失败:\", error);\n        this.$message.error(\"获取待审核列表失败，请稍后重试\");\n      }\n    },\n    paginate(data) {\n      const start = (this.currentPage - 1) * this.pageSize;\n      const end = this.currentPage * this.pageSize;\n      return data.slice(start, end);\n    },\n    handlePageChange(page) {\n      this.currentPage = page;\n      this.getAllDutyRecords();\n    },\n    handleSizeChange(size) {\n      this.pageSize = size;\n      this.currentPage = 1; // 重置到第一页\n      this.getAllDutyRecords();\n    },\n    search() {\n      if (!this.searchQuery) {\n        this.$message.warning(\"请输入团队名称查询\");\n        return;\n      }\n\n      // 根据团队名称过滤数据\n      this.tableData = this.tableData.filter(item =>\n          item.teamName.toLowerCase().includes(this.searchQuery.toLowerCase())\n      );\n    },\n    reset() {\n      this.searchQuery = \"\";\n      this.currentPage = 1; // 重置到第一页\n      this.getAllDutyRecords();\n    },\n    openDialog(row) {\n      this.selectedRow = row;\n      this.dialogVisible = true;\n    },\n    handlePass() {\n      if (!this.selectedRow) return;\n\n      axios\n          .put(\"http://localhost:8080/dutyrecords/update\", {\n            dutyId: this.selectedRow.dutyId,\n            status: \"已通过\",\n          })\n          .then((response) => {\n            if (response.data.code === 200) {\n              this.$message.success(\"审核通过成功\");\n              this.selectedRow.status = \"已通过\";\n              this.dialogVisible = false;\n            } else {\n              this.$message.error(response.data.msg || \"审核失败\");\n            }\n          })\n          .catch((error) => {\n            console.error(\"审核失败:\", error);\n            this.$message.error(\"审核失败，请稍后重试\");\n          });\n    },\n    handleNoPass(row) {\n      axios\n          .put(\"http://localhost:8080/dutyrecords/update\", {\n            dutyId: row.dutyId,\n            status: \"未通过\",\n          })\n          .then((response) => {\n            if (response.data.code === 200) {\n              this.$message.success(\"审核不通过成功\");\n              row.status = \"未通过\";\n            } else {\n              this.$message.error(response.data.msg || \"操作失败\");\n            }\n          })\n          .catch((error) => {\n            console.error(\"操作失败:\", error);\n            this.$message.error(\"操作失败，请稍后重试\");\n          });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.container {\n    padding: 20px;\n    background-color: #f9f9f9;\n}\n\n.header {\n    display: flex;\n    gap: 10px;\n    margin-bottom: 15px;\n}\n\n.header .el-input {\n    max-width: 300px;\n}\n\n.table-wrapper {\n    border: 1px solid #e0e0e0;\n    border-radius: 5px;\n    background-color: #ffffff;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n    padding: 10px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
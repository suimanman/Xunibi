{"ast":null,"code":"import axios from \"axios\";\nconst http = axios.create({\n  baseURL: \"http://localhost:8080\",\n  // 后端服务地址\n  timeout: 10000 // 请求超时时间\n});\nexport default {\n  data() {\n    return {\n      searchQuery: null,\n      // 搜索内容\n      noticeData: [],\n      // 公告数据\n      dialogVisible: false,\n      // 弹窗是否可见\n      dialogTitle: \"\",\n      // 弹窗标题\n      form: {\n        id: null,\n        content: \"\",\n        display: false // 默认显示\n      },\n      formRules: {\n        content: [{\n          required: true,\n          message: \"请输入公告内容\",\n          trigger: \"blur\"\n        }],\n        display: [{\n          required: true,\n          message: \"请选择是否显示\",\n          trigger: \"change\"\n        }]\n      }\n    };\n  },\n  methods: {\n    // 查询公告\n    search() {\n      this.fetchData({\n        search: this.searchQuery\n      });\n    },\n    // 重置查询条件\n    reset() {\n      this.searchQuery = \"\";\n      this.fetchData();\n    },\n    // 打开新增/编辑弹窗\n    openDialog(type, row = {}) {\n      this.dialogTitle = type === \"add\" ? \"新增公告\" : \"编辑公告\";\n      this.dialogVisible = true;\n      if (type === \"add\") {\n        // 清空表单数据\n        this.form = {\n          id: null,\n          content: \"\",\n          display: null\n        };\n      } else {\n        this.form = {\n          ...row,\n          display: row.display === true || row.display === 'true'\n        };\n      }\n    },\n    // 保存公告\n    save() {\n      this.$refs.formRef.validate(valid => {\n        if (!valid) return;\n        const apiCall = this.form.id ? http.put(`/notices/${this.form.id}`, this.form) // 编辑\n        : http.post(\"/notices\", this.form); // 新增\n\n        apiCall.then(() => {\n          this.$message.success(this.form.id ? \"编辑成功！\" : \"新增成功！\");\n          this.dialogVisible = false;\n          this.fetchData(); // 刷新数据\n        }).catch(error => {\n          console.error(\"Failed to save notice:\", error);\n          this.$message.error(this.form.id ? \"编辑失败！\" : \"新增失败！\");\n        });\n      });\n    },\n    // 删除公告\n    del(id) {\n      this.$confirm(\"确认删除此公告吗？\", \"提示\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(() => {\n        http.delete(`/notices/${id}`).then(() => {\n          this.$message.success(\"删除成功！\");\n          this.fetchData(); // 重新加载数据\n        }).catch(error => {\n          console.error(\"Failed to delete:\", error);\n          this.$message.error(\"删除失败！\");\n        });\n      }).catch(() => {\n        this.$message.info(\"已取消删除\");\n      });\n    },\n    // 格式化是否显示\n    formatDisplay(row) {\n      return row.display === true ? \"是\" : \"否\";\n    },\n    // 格式化日期\n    formatDate(row) {\n      const date = new Date(row.createdAt);\n      return date.toLocaleString(); // 本地化时间\n    },\n    // 获取公告数据\n    fetchData(params = {}) {\n      http.get(\"/notices\", {\n        params\n      }).then(response => {\n        this.noticeData = response.data.data || [];\n      }).catch(error => {\n        console.error(\"Failed to fetch data:\", error);\n        this.$message.error(\"加载公告失败！\");\n      });\n    }\n  },\n  mounted() {\n    // 初始化加载公告数据\n    this.fetchData();\n  }\n};","map":{"version":3,"names":["axios","http","create","baseURL","timeout","data","searchQuery","noticeData","dialogVisible","dialogTitle","form","id","content","display","formRules","required","message","trigger","methods","search","fetchData","reset","openDialog","type","row","save","$refs","formRef","validate","valid","apiCall","put","post","then","$message","success","catch","error","console","del","$confirm","confirmButtonText","cancelButtonText","delete","info","formatDisplay","formatDate","date","Date","createdAt","toLocaleString","params","get","response","mounted"],"sources":["src/views/manage/NoticeView.vue"],"sourcesContent":["<template>\n    <div>\n        <!-- 搜索框 -->\n        <div class=\"search\">\n            <el-input v-model=\"searchQuery\" placeholder=\"请输入id查询\" style=\"width: 200px\" />\n            <el-button type=\"info\" plain style=\"margin-left: 10px\" @click=\"search\" icon=\"el-icon-zoom-in\">查询</el-button>\n            <el-button type=\"warning\" plain style=\"margin-left: 10px\" @click=\"reset\"\n                icon=\"el-icon-refresh-left\">重置</el-button>\n            <el-button type=\"primary\" plain @click=\"openDialog('add')\">新增</el-button>\n        </div>\n\n        <!-- 公告表格 -->\n        <div class=\"table\">\n            <el-table :data=\"noticeData\" border>\n                <el-table-column prop=\"id\" label=\"Id\" sortable width=\"150\" />\n                <el-table-column prop=\"content\" label=\"公告内容\" />\n                <el-table-column prop=\"createdAt\" label=\"公告发布时间\" :formatter=\"formatDate\" width=\"180\" />\n                <el-table-column prop=\"display\" label=\"是否显示\" :formatter=\"formatDisplay\" width=\"120\" />\n                <el-table-column label=\"操作\" width=\"200\">\n                    <template slot-scope=\"scope\">\n                        <el-button size=\"mini\" type=\"primary\" plain @click=\"openDialog('edit', scope.row)\">\n                            编辑\n                        </el-button>\n                        <el-button size=\"mini\" type=\"danger\" plain @click=\"del(scope.row.id)\">\n                            删除\n                        </el-button>\n                    </template>\n                </el-table-column>\n            </el-table>\n        </div>\n\n        <!-- 新增/编辑弹窗 -->\n        <el-dialog :title=\"dialogTitle\" :visible=\"dialogVisible\" width=\"500px\">\n            <el-form :model=\"form\" :rules=\"formRules\" ref=\"formRef\" label-width=\"100px\">\n                <el-form-item label=\"公告内容\" prop=\"content\">\n                    <el-input v-model=\"form.content\" placeholder=\"请输入公告内容\" />\n                </el-form-item>\n                <el-form-item label=\"是否显示\" prop=\"display\">\n                    <el-switch v-model=\"form.display\" :active-text=\"'显示'\" :inactive-text=\"'隐藏'\" />\n                </el-form-item>\n            </el-form>\n            <div slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click=\"dialogVisible = false\">取消</el-button>\n                <el-button type=\"primary\" @click=\"save\">保存</el-button>\n            </div>\n        </el-dialog>\n    </div>\n</template>\n\n<script>\nimport axios from \"axios\";\n\nconst http = axios.create({\n    baseURL: \"http://localhost:8080\", // 后端服务地址\n    timeout: 10000, // 请求超时时间\n});\n\nexport default {\n    data() {\n        return {\n            searchQuery: null, // 搜索内容\n            noticeData: [], // 公告数据\n            dialogVisible: false, // 弹窗是否可见\n            dialogTitle: \"\", // 弹窗标题\n            form: {\n                id: null,\n                content: \"\",\n                display: false, // 默认显示\n            },\n            formRules: {\n                content: [{ required: true, message: \"请输入公告内容\", trigger: \"blur\" }],\n                display: [{ required: true, message: \"请选择是否显示\", trigger: \"change\" }],\n            },\n        };\n    },\n    methods: {\n        // 查询公告\n        search() {\n            this.fetchData({ search: this.searchQuery });\n        },\n        // 重置查询条件\n        reset() {\n            this.searchQuery = \"\";\n            this.fetchData();\n        },\n        // 打开新增/编辑弹窗\n        openDialog(type, row = {}) {\n            this.dialogTitle = type === \"add\" ? \"新增公告\" : \"编辑公告\";\n            this.dialogVisible = true;\n            if (type === \"add\") {\n                // 清空表单数据\n                this.form = { id: null, content: \"\", display: null };\n            } else {\n                this.form = {\n                    ...row,\n                    display: row.display === true || row.display === 'true',\n                };\n            }\n        },\n        // 保存公告\n        save() {\n            this.$refs.formRef.validate((valid) => {\n                if (!valid) return;\n\n                const apiCall = this.form.id\n                    ? http.put(`/notices/${this.form.id}`, this.form) // 编辑\n                    : http.post(\"/notices\", this.form); // 新增\n\n                apiCall\n                    .then(() => {\n                        this.$message.success(this.form.id ? \"编辑成功！\" : \"新增成功！\");\n                        this.dialogVisible = false;\n                        this.fetchData(); // 刷新数据\n                    })\n                    .catch((error) => {\n                        console.error(\"Failed to save notice:\", error);\n                        this.$message.error(this.form.id ? \"编辑失败！\" : \"新增失败！\");\n                    });\n            });\n        },\n        // 删除公告\n        del(id) {\n            this.$confirm(\"确认删除此公告吗？\", \"提示\", {\n                confirmButtonText: \"确定\",\n                cancelButtonText: \"取消\",\n                type: \"warning\",\n            })\n                .then(() => {\n                    http.delete(`/notices/${id}`)\n                        .then(() => {\n                            this.$message.success(\"删除成功！\");\n                            this.fetchData(); // 重新加载数据\n                        })\n                        .catch((error) => {\n                            console.error(\"Failed to delete:\", error);\n                            this.$message.error(\"删除失败！\");\n                        });\n                })\n                .catch(() => {\n                    this.$message.info(\"已取消删除\");\n                });\n        },\n        // 格式化是否显示\n        formatDisplay(row) {\n            return row.display === true ? \"是\" : \"否\";\n        },\n        // 格式化日期\n        formatDate(row) {\n            const date = new Date(row.createdAt);\n            return date.toLocaleString(); // 本地化时间\n        },\n        // 获取公告数据\n        fetchData(params = {}) {\n            http.get(\"/notices\", { params })\n                .then((response) => {\n                    this.noticeData = response.data.data || [];\n                })\n                .catch((error) => {\n                    console.error(\"Failed to fetch data:\", error);\n                    this.$message.error(\"加载公告失败！\");\n                });\n        },\n    },\n    mounted() {\n        // 初始化加载公告数据\n        this.fetchData();\n    },\n};\n</script>\n<style scoped>\n.search {\n    display: flex;\n    align-items: center;\n    margin-bottom: 15px;\n}\n\n.table {\n    border: 1px solid #e0e0e0;\n    border-radius: 5px;\n    background-color: #ffffff;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n    padding: 10px;\n}\n</style>\n"],"mappings":"AAkDA,OAAAA,KAAA;AAEA,MAAAC,IAAA,GAAAD,KAAA,CAAAE,MAAA;EACAC,OAAA;EAAA;EACAC,OAAA;AACA;AAEA;EACAC,KAAA;IACA;MACAC,WAAA;MAAA;MACAC,UAAA;MAAA;MACAC,aAAA;MAAA;MACAC,WAAA;MAAA;MACAC,IAAA;QACAC,EAAA;QACAC,OAAA;QACAC,OAAA;MACA;MACAC,SAAA;QACAF,OAAA;UAAAG,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;QACAJ,OAAA;UAAAE,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MACA;IACA;EACA;EACAC,OAAA;IACA;IACAC,OAAA;MACA,KAAAC,SAAA;QAAAD,MAAA,OAAAb;MAAA;IACA;IACA;IACAe,MAAA;MACA,KAAAf,WAAA;MACA,KAAAc,SAAA;IACA;IACA;IACAE,WAAAC,IAAA,EAAAC,GAAA;MACA,KAAAf,WAAA,GAAAc,IAAA;MACA,KAAAf,aAAA;MACA,IAAAe,IAAA;QACA;QACA,KAAAb,IAAA;UAAAC,EAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MACA;QACA,KAAAH,IAAA;UACA,GAAAc,GAAA;UACAX,OAAA,EAAAW,GAAA,CAAAX,OAAA,aAAAW,GAAA,CAAAX,OAAA;QACA;MACA;IACA;IACA;IACAY,KAAA;MACA,KAAAC,KAAA,CAAAC,OAAA,CAAAC,QAAA,CAAAC,KAAA;QACA,KAAAA,KAAA;QAEA,MAAAC,OAAA,QAAApB,IAAA,CAAAC,EAAA,GACAV,IAAA,CAAA8B,GAAA,kBAAArB,IAAA,CAAAC,EAAA,SAAAD,IAAA;QAAA,EACAT,IAAA,CAAA+B,IAAA,kBAAAtB,IAAA;;QAEAoB,OAAA,CACAG,IAAA;UACA,KAAAC,QAAA,CAAAC,OAAA,MAAAzB,IAAA,CAAAC,EAAA;UACA,KAAAH,aAAA;UACA,KAAAY,SAAA;QACA,GACAgB,KAAA,CAAAC,KAAA;UACAC,OAAA,CAAAD,KAAA,2BAAAA,KAAA;UACA,KAAAH,QAAA,CAAAG,KAAA,MAAA3B,IAAA,CAAAC,EAAA;QACA;MACA;IACA;IACA;IACA4B,IAAA5B,EAAA;MACA,KAAA6B,QAAA;QACAC,iBAAA;QACAC,gBAAA;QACAnB,IAAA;MACA,GACAU,IAAA;QACAhC,IAAA,CAAA0C,MAAA,aAAAhC,EAAA,IACAsB,IAAA;UACA,KAAAC,QAAA,CAAAC,OAAA;UACA,KAAAf,SAAA;QACA,GACAgB,KAAA,CAAAC,KAAA;UACAC,OAAA,CAAAD,KAAA,sBAAAA,KAAA;UACA,KAAAH,QAAA,CAAAG,KAAA;QACA;MACA,GACAD,KAAA;QACA,KAAAF,QAAA,CAAAU,IAAA;MACA;IACA;IACA;IACAC,cAAArB,GAAA;MACA,OAAAA,GAAA,CAAAX,OAAA;IACA;IACA;IACAiC,WAAAtB,GAAA;MACA,MAAAuB,IAAA,OAAAC,IAAA,CAAAxB,GAAA,CAAAyB,SAAA;MACA,OAAAF,IAAA,CAAAG,cAAA;IACA;IACA;IACA9B,UAAA+B,MAAA;MACAlD,IAAA,CAAAmD,GAAA;QAAAD;MAAA,GACAlB,IAAA,CAAAoB,QAAA;QACA,KAAA9C,UAAA,GAAA8C,QAAA,CAAAhD,IAAA,CAAAA,IAAA;MACA,GACA+B,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,0BAAAA,KAAA;QACA,KAAAH,QAAA,CAAAG,KAAA;MACA;IACA;EACA;EACAiB,QAAA;IACA;IACA,KAAAlC,SAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
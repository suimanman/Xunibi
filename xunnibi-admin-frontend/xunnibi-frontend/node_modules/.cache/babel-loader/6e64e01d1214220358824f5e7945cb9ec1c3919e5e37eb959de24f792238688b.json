{"ast":null,"code":"import LoginView from '@/views/Login.vue';\nexport default {\n  data() {\n    const checkUsername = (rule, value, callback) => {\n      if (!value) {\n        return callback(new Error('用户名不能为空'));\n      } else {\n        callback();\n      }\n    };\n    const validatePass = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请输入密码'));\n      } else {\n        if (this.ruleForm.checkPass !== '') {\n          this.$refs.ruleForm.validateField('checkPass');\n        }\n        callback();\n      }\n    };\n    const validatePass2 = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请再次输入密码'));\n      } else if (value !== this.ruleForm.pass) {\n        callback(new Error('两次输入密码不一致!'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      ruleForm: {\n        pass: '',\n        checkPass: '',\n        username: ''\n      },\n      rules: {\n        pass: [{\n          validator: validatePass,\n          trigger: 'blur'\n        }],\n        checkPass: [{\n          validator: validatePass2,\n          trigger: 'blur'\n        }],\n        username: [{\n          validator: checkUsername,\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  methods: {\n    submitForm(formName) {\n      this.$refs[formName].validate(valid => {\n        if (valid) {\n          alert('submit!');\n        } else {\n          console.log('error submit!!');\n          return false;\n        }\n      });\n    },\n    resetForm(formName) {\n      this.$refs[formName].resetFields();\n    }\n  }\n};","map":{"version":3,"names":["LoginView","data","checkUsername","rule","value","callback","Error","validatePass","ruleForm","checkPass","$refs","validateField","validatePass2","pass","username","rules","validator","trigger","methods","submitForm","formName","validate","valid","alert","console","log","resetForm","resetFields"],"sources":["src/views/RegisterView.vue"],"sourcesContent":["<script>\nimport LoginView from '@/views/Login.vue'\nexport default {\n    data() {\n        const checkUsername = (rule, value, callback) => {\n            if (!value) {\n                return callback(new Error('用户名不能为空'));\n            } else {\n                callback();\n            }\n        };\n        const validatePass = (rule, value, callback) => {\n            if (value === '') {\n                callback(new Error('请输入密码'));\n            } else {\n                if (this.ruleForm.checkPass !== '') {\n                    this.$refs.ruleForm.validateField('checkPass');\n                }\n                callback();\n            }\n        };\n        const validatePass2 = (rule, value, callback) => {\n            if (value === '') {\n                callback(new Error('请再次输入密码'));\n            } else if (value !== this.ruleForm.pass) {\n                callback(new Error('两次输入密码不一致!'));\n            } else {\n                callback();\n            }\n        };\n        return {\n            ruleForm: {\n                pass: '',\n                checkPass: '',\n                username: ''\n            },\n            rules: {\n                pass: [\n                    { validator: validatePass, trigger: 'blur' }\n                ],\n                checkPass: [\n                    { validator: validatePass2, trigger: 'blur' }\n                ],\n                username: [\n                    { validator: checkUsername, trigger: 'blur' }\n                ]\n            }\n        };\n    },\n    methods: {\n        submitForm(formName) {\n            this.$refs[formName].validate((valid) => {\n                if (valid) {\n                    alert('submit!');\n                } else {\n                    console.log('error submit!!');\n                    return false;\n                }\n            });\n        },\n        resetForm(formName) {\n            this.$refs[formName].resetFields();\n        }\n    }\n}\n</script>\n\n<template>\n    <el-form :model=\"ruleForm\" status-icon :rules=\"rules\" ref=\"ruleForm\" label-width=\"100px\" class=\"demo-ruleForm\">\n        <el-form-item label=\"用户名\" prop=\"username\">\n            <el-input v-model.number=\"ruleForm.username\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"密码\" prop=\"pass\">\n            <el-input type=\"password\" v-model=\"ruleForm.pass\" autocomplete=\"off\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"确认密码\" prop=\"checkPass\">\n            <el-input type=\"password\" v-model=\"ruleForm.checkPass\" autocomplete=\"off\"></el-input>\n        </el-form-item>\n\n        <el-form-item>\n            <el-button type=\"primary\" @click=\"submitForm('ruleForm')\">提交</el-button>\n            <el-button @click=\"resetForm('ruleForm')\">重置</el-button>\n        </el-form-item>\n    </el-form>\n</template>\n\n<style scoped></style>\n"],"mappings":"AACA,OAAAA,SAAA;AACA;EACAC,KAAA;IACA,MAAAC,aAAA,GAAAA,CAAAC,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,KAAAD,KAAA;QACA,OAAAC,QAAA,KAAAC,KAAA;MACA;QACAD,QAAA;MACA;IACA;IACA,MAAAE,YAAA,GAAAA,CAAAJ,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,IAAAD,KAAA;QACAC,QAAA,KAAAC,KAAA;MACA;QACA,SAAAE,QAAA,CAAAC,SAAA;UACA,KAAAC,KAAA,CAAAF,QAAA,CAAAG,aAAA;QACA;QACAN,QAAA;MACA;IACA;IACA,MAAAO,aAAA,GAAAA,CAAAT,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,IAAAD,KAAA;QACAC,QAAA,KAAAC,KAAA;MACA,WAAAF,KAAA,UAAAI,QAAA,CAAAK,IAAA;QACAR,QAAA,KAAAC,KAAA;MACA;QACAD,QAAA;MACA;IACA;IACA;MACAG,QAAA;QACAK,IAAA;QACAJ,SAAA;QACAK,QAAA;MACA;MACAC,KAAA;QACAF,IAAA,GACA;UAAAG,SAAA,EAAAT,YAAA;UAAAU,OAAA;QAAA,EACA;QACAR,SAAA,GACA;UAAAO,SAAA,EAAAJ,aAAA;UAAAK,OAAA;QAAA,EACA;QACAH,QAAA,GACA;UAAAE,SAAA,EAAAd,aAAA;UAAAe,OAAA;QAAA;MAEA;IACA;EACA;EACAC,OAAA;IACAC,WAAAC,QAAA;MACA,KAAAV,KAAA,CAAAU,QAAA,EAAAC,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACAC,KAAA;QACA;UACAC,OAAA,CAAAC,GAAA;UACA;QACA;MACA;IACA;IACAC,UAAAN,QAAA;MACA,KAAAV,KAAA,CAAAU,QAAA,EAAAO,WAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
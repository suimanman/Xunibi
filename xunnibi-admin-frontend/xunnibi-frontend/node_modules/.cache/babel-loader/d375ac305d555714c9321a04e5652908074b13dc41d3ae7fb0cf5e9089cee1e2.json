{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      teamList: [],\n      // 团队数据列表\n      searchQuery: null,\n      // 搜索关键字\n      tableData: [],\n      // 原始数据\n      displayedData: [],\n      // 当前页显示的数据\n      currentPage: 1,\n      // 当前页码\n      pageSize: 10,\n      // 每页显示条数\n      total: 0 // 数据总条数\n    };\n  },\n  mounted() {\n    this.getAchievementList(); // 初始化加载数据\n  },\n  methods: {\n    // 获取待审核列表\n    async getAchievementList() {\n      try {\n        const [achievementListResponse, teamListResponse] = await Promise.all([axios.get(\"http://localhost:8080/records/achieveRecords\"), axios.get(\"http://localhost:8080/team/list\")]);\n        if (achievementListResponse.data.code === 200 && teamListResponse.status === 200) {\n          this.tableData = achievementListResponse.data.data.map(item => {\n            const team = teamListResponse.data.find(t => t.teamId === item.teamId);\n            return {\n              ...item,\n              material: item.description,\n              teamName: team ? team.teamName : \"未知\"\n            };\n          });\n          this.total = this.tableData.length; // 设置总条目数\n          this.updateDisplayedData(); // 初始化当前页数据\n        }\n      } catch (error) {\n        console.error(\"获取待审核列表失败:\", error);\n        this.$message.error(\"获取待审核列表失败，请稍后重试\");\n      }\n    },\n    // 更新显示的数据\n    updateDisplayedData() {\n      const start = (this.currentPage - 1) * this.pageSize;\n      const end = start + this.pageSize;\n      this.displayedData = this.tableData.slice(start, end);\n    },\n    // 处理页码变化\n    handlePageChange(newPage) {\n      this.currentPage = newPage;\n      this.updateDisplayedData();\n    },\n    // 处理每页条数变化\n    handlePageSizeChange(newSize) {\n      this.pageSize = newSize;\n      this.currentPage = 1; // 重置到第一页\n      this.updateDisplayedData();\n    },\n    // 查询功能\n    search() {\n      if (!this.searchQuery) {\n        this.$message.warning(\"请输入团队名称查询\");\n        return;\n      }\n      const filteredData = this.tableData.filter(item => item.teamName.toLowerCase().includes(this.searchQuery.toLowerCase()));\n      this.total = filteredData.length; // 更新总条目数\n      this.currentPage = 1; // 重置页码\n      this.displayedData = filteredData.slice(0, this.pageSize); // 更新显示数据\n    },\n    // 重置查询\n    reset() {\n      this.searchQuery = null;\n      this.currentPage = 1;\n      this.updateDisplayedData();\n    },\n    // 导出文件\n    async exportFile() {\n      try {\n        const response = await axios.get(\"http://localhost:8080/export/achieve\", {\n          responseType: \"arraybuffer\" // 返回文件数据\n        });\n        const blob = new Blob([response.data], {\n          type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n        });\n        const link = document.createElement(\"a\");\n        link.href = URL.createObjectURL(blob);\n        link.download = \"Achievements_Report.xlsx\";\n        link.click();\n      } catch (error) {\n        console.error(\"导出报表失败:\", error);\n        this.$message.error(\"导出报表失败，请稍后再试\");\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","teamList","searchQuery","tableData","displayedData","currentPage","pageSize","total","mounted","getAchievementList","methods","achievementListResponse","teamListResponse","Promise","all","get","code","status","map","item","team","find","t","teamId","material","description","teamName","length","updateDisplayedData","error","console","$message","start","end","slice","handlePageChange","newPage","handlePageSizeChange","newSize","search","warning","filteredData","filter","toLowerCase","includes","reset","exportFile","response","responseType","blob","Blob","type","link","document","createElement","href","URL","createObjectURL","download","click"],"sources":["src/views/manage/ReviewRecordsView.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <div class=\"header\">\n      <el-input v-model=\"searchQuery\" placeholder=\"请输入团队名称\" style=\"width: 250px\"></el-input>\n      <el-button type=\"primary\" plain @click=\"search\" icon=\"el-icon-zoom-in\">查询</el-button>\n      <el-button type=\"warning\" plain @click=\"reset\" icon=\"el-icon-refresh-left\">重置</el-button>\n      <el-button type=\"info\" plain @click=\"exportFile\" icon=\"el-icon-download\">导出</el-button>\n    </div>\n\n    <div class=\"table-wrapper\">\n      <el-table ref=\"filterTable\" :data=\"displayedData\" style=\"width: 100%\" border>\n        <el-table-column prop=\"achievementId\" label=\"ID\" align=\"center\" width=\"100px\" />\n        <el-table-column prop=\"material\" label=\"审核材料\" align=\"left\" />\n        <el-table-column prop=\"achievementType\" label=\"审核材料类型\" align=\"center\" width=\"150px\" />\n        <el-table-column prop=\"teamId\" label=\"团队ID\" align=\"center\" width=\"100px\" />\n        <el-table-column prop=\"teamName\" label=\"团队名称\" align=\"center\" width=\"100px\" />\n        <el-table-column prop=\"status\" label=\"审核状态\" align=\"center\" width=\"100px\" />\n      </el-table>\n\n      <el-pagination\n          background\n          layout=\"prev, pager, next, sizes, total, jumper\"\n          :current-page=\"currentPage\"\n          :page-size=\"pageSize\"\n          :total=\"total\"\n          @current-change=\"handlePageChange\"\n          @size-change=\"handlePageSizeChange\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\n\nexport default {\n  data() {\n    return {\n      teamList: [], // 团队数据列表\n      searchQuery: null, // 搜索关键字\n      tableData: [], // 原始数据\n      displayedData: [], // 当前页显示的数据\n      currentPage: 1, // 当前页码\n      pageSize: 10, // 每页显示条数\n      total: 0, // 数据总条数\n    };\n  },\n  mounted() {\n    this.getAchievementList(); // 初始化加载数据\n  },\n  methods: {\n    // 获取待审核列表\n    async getAchievementList() {\n      try {\n        const [achievementListResponse, teamListResponse] = await Promise.all([\n          axios.get(\"http://localhost:8080/records/achieveRecords\"),\n          axios.get(\"http://localhost:8080/team/list\"),\n        ]);\n        if (achievementListResponse.data.code === 200 && teamListResponse.status === 200) {\n          this.tableData = achievementListResponse.data.data.map((item) => {\n            const team = teamListResponse.data.find((t) => t.teamId === item.teamId);\n            return {\n              ...item,\n              material: item.description,\n              teamName: team ? team.teamName : \"未知\",\n            };\n          });\n          this.total = this.tableData.length; // 设置总条目数\n          this.updateDisplayedData(); // 初始化当前页数据\n        }\n      } catch (error) {\n        console.error(\"获取待审核列表失败:\", error);\n        this.$message.error(\"获取待审核列表失败，请稍后重试\");\n      }\n    },\n\n    // 更新显示的数据\n    updateDisplayedData() {\n      const start = (this.currentPage - 1) * this.pageSize;\n      const end = start + this.pageSize;\n      this.displayedData = this.tableData.slice(start, end);\n    },\n\n    // 处理页码变化\n    handlePageChange(newPage) {\n      this.currentPage = newPage;\n      this.updateDisplayedData();\n    },\n\n    // 处理每页条数变化\n    handlePageSizeChange(newSize) {\n      this.pageSize = newSize;\n      this.currentPage = 1; // 重置到第一页\n      this.updateDisplayedData();\n    },\n\n    // 查询功能\n    search() {\n      if (!this.searchQuery) {\n        this.$message.warning(\"请输入团队名称查询\");\n        return;\n      }\n      const filteredData = this.tableData.filter(item =>\n          item.teamName.toLowerCase().includes(this.searchQuery.toLowerCase())\n      );\n      this.total = filteredData.length; // 更新总条目数\n      this.currentPage = 1; // 重置页码\n      this.displayedData = filteredData.slice(0, this.pageSize); // 更新显示数据\n    },\n\n    // 重置查询\n    reset() {\n      this.searchQuery = null;\n      this.currentPage = 1;\n      this.updateDisplayedData();\n    },\n\n    // 导出文件\n    async exportFile() {\n      try {\n        const response = await axios.get(\"http://localhost:8080/export/achieve\", {\n          responseType: \"arraybuffer\", // 返回文件数据\n        });\n        const blob = new Blob([response.data], { type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\" });\n        const link = document.createElement(\"a\");\n        link.href = URL.createObjectURL(blob);\n        link.download = \"Achievements_Report.xlsx\";\n        link.click();\n      } catch (error) {\n        console.error(\"导出报表失败:\", error);\n        this.$message.error(\"导出报表失败，请稍后再试\");\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.container {\n    padding: 20px;\n    background-color: #f9f9f9;\n}\n\n.header {\n    display: flex;\n    gap: 10px;\n    margin-bottom: 15px;\n}\n\n.header .el-input {\n    max-width: 300px;\n}\n\n.table-wrapper {\n    border: 1px solid #e0e0e0;\n    border-radius: 5px;\n    background-color: #ffffff;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n    padding: 10px;\n}\n</style>\n"],"mappings":";;;;;;;AAiCA,OAAAA,KAAA;AAEA;EACAC,KAAA;IACA;MACAC,QAAA;MAAA;MACAC,WAAA;MAAA;MACAC,SAAA;MAAA;MACAC,aAAA;MAAA;MACAC,WAAA;MAAA;MACAC,QAAA;MAAA;MACAC,KAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,kBAAA;EACA;EACAC,OAAA;IACA;IACA,MAAAD,mBAAA;MACA;QACA,OAAAE,uBAAA,EAAAC,gBAAA,UAAAC,OAAA,CAAAC,GAAA,EACAf,KAAA,CAAAgB,GAAA,kDACAhB,KAAA,CAAAgB,GAAA,oCACA;QACA,IAAAJ,uBAAA,CAAAX,IAAA,CAAAgB,IAAA,YAAAJ,gBAAA,CAAAK,MAAA;UACA,KAAAd,SAAA,GAAAQ,uBAAA,CAAAX,IAAA,CAAAA,IAAA,CAAAkB,GAAA,CAAAC,IAAA;YACA,MAAAC,IAAA,GAAAR,gBAAA,CAAAZ,IAAA,CAAAqB,IAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAC,MAAA,KAAAJ,IAAA,CAAAI,MAAA;YACA;cACA,GAAAJ,IAAA;cACAK,QAAA,EAAAL,IAAA,CAAAM,WAAA;cACAC,QAAA,EAAAN,IAAA,GAAAA,IAAA,CAAAM,QAAA;YACA;UACA;UACA,KAAAnB,KAAA,QAAAJ,SAAA,CAAAwB,MAAA;UACA,KAAAC,mBAAA;QACA;MACA,SAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,eAAAA,KAAA;QACA,KAAAE,QAAA,CAAAF,KAAA;MACA;IACA;IAEA;IACAD,oBAAA;MACA,MAAAI,KAAA,SAAA3B,WAAA,aAAAC,QAAA;MACA,MAAA2B,GAAA,GAAAD,KAAA,QAAA1B,QAAA;MACA,KAAAF,aAAA,QAAAD,SAAA,CAAA+B,KAAA,CAAAF,KAAA,EAAAC,GAAA;IACA;IAEA;IACAE,iBAAAC,OAAA;MACA,KAAA/B,WAAA,GAAA+B,OAAA;MACA,KAAAR,mBAAA;IACA;IAEA;IACAS,qBAAAC,OAAA;MACA,KAAAhC,QAAA,GAAAgC,OAAA;MACA,KAAAjC,WAAA;MACA,KAAAuB,mBAAA;IACA;IAEA;IACAW,OAAA;MACA,UAAArC,WAAA;QACA,KAAA6B,QAAA,CAAAS,OAAA;QACA;MACA;MACA,MAAAC,YAAA,QAAAtC,SAAA,CAAAuC,MAAA,CAAAvB,IAAA,IACAA,IAAA,CAAAO,QAAA,CAAAiB,WAAA,GAAAC,QAAA,MAAA1C,WAAA,CAAAyC,WAAA,GACA;MACA,KAAApC,KAAA,GAAAkC,YAAA,CAAAd,MAAA;MACA,KAAAtB,WAAA;MACA,KAAAD,aAAA,GAAAqC,YAAA,CAAAP,KAAA,SAAA5B,QAAA;IACA;IAEA;IACAuC,MAAA;MACA,KAAA3C,WAAA;MACA,KAAAG,WAAA;MACA,KAAAuB,mBAAA;IACA;IAEA;IACA,MAAAkB,WAAA;MACA;QACA,MAAAC,QAAA,SAAAhD,KAAA,CAAAgB,GAAA;UACAiC,YAAA;QACA;QACA,MAAAC,IAAA,OAAAC,IAAA,EAAAH,QAAA,CAAA/C,IAAA;UAAAmD,IAAA;QAAA;QACA,MAAAC,IAAA,GAAAC,QAAA,CAAAC,aAAA;QACAF,IAAA,CAAAG,IAAA,GAAAC,GAAA,CAAAC,eAAA,CAAAR,IAAA;QACAG,IAAA,CAAAM,QAAA;QACAN,IAAA,CAAAO,KAAA;MACA,SAAA9B,KAAA;QACAC,OAAA,CAAAD,KAAA,YAAAA,KAAA;QACA,KAAAE,QAAA,CAAAF,KAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
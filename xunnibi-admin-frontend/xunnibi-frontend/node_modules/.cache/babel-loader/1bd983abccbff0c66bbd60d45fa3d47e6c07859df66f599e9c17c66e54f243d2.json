{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {};\n  },\n  created() {\n    this.load(); // 页面加载时获取数据\n  },\n  methods: {\n    handleDialogClose() {\n      this.dialogVisible = false;\n    },\n    async load() {\n      try {\n        const response = await axios.get('http://localhost:8080/records/achieveRecords');\n        if (response.status === 200 && response.data) {\n          console.log(\"团队列表数据:\", response.data);\n          this.teams = response.data.data; // 假设返回的数据包含团队列表\n          console.log(\"团队列表数据teams:\", this.teams);\n        } else {\n          console.error(\"服务器返回了不符合预期的响应\", response);\n        }\n      } catch (error) {\n        if (error.response) {\n          // 服务器响应了错误状态码\n          console.error(\"服务器错误:\", error.response.data);\n        } else if (error.request) {\n          // 请求没有收到响应\n          console.error(\"没有收到响应:\", error.request);\n        } else {\n          // 其他类型的错误（如请求配置错误）\n          console.error(\"请求错误:\", error.message);\n        }\n      }\n    },\n    async search() {\n      // 如果没有输入查询条件，提醒用户\n      if (!this.searchQuery) {\n        this.$message.error('请输入团队ID');\n        return;\n      }\n      try {\n        // 使用输入的团队 ID 调用后端接口\n        const response = await axios.get(`http://localhost:8080/team/${this.searchQuery}`);\n\n        // 成功获取数据后，更新表格数据\n        if (response.status === 200 && response.data) {\n          console.log(response.data);\n          this.teams = [response.data]; // 假设返回的是一个团队对象\n        } else if (!response.data) {\n          this.$message.error(\"没有这支团队\");\n        }\n      } catch (error) {\n        // 处理查询失败的情况\n        this.$message.error(\"查询失败\");\n        console.error(\"查询失败:\", error);\n      }\n    },\n    reset() {\n      // 重置搜索条件并重新加载数据\n      this.searchQuery = '';\n      this.load();\n    },\n    handleAdd() {\n      // 处理新增操作\n      console.log(\"新增团队\");\n      this.newTeam = {\n        teamId: null,\n        teamName: \"\",\n        virtualCoins: 0,\n        creationDate: null\n      };\n      this.editMode = false; // 设置为新增模式\n      this.dialogVisible = true; // 显示对话框\n    }\n  }\n};","map":{"version":3,"names":["axios","data","created","load","methods","handleDialogClose","dialogVisible","response","get","status","console","log","teams","error","request","message","search","searchQuery","$message","reset","handleAdd","newTeam","teamId","teamName","virtualCoins","creationDate","editMode"],"sources":["src/views/manage/ReviewRecordsView.vue"],"sourcesContent":["<template>\n    <div class=\"container\">\n        <div class=\"search\">\n            <el-input v-model=\"searchQuery\" placeholder=\"请输入团队id查询\" style=\"width: 200px\"></el-input>\n            <el-button type=\"info\" plain style=\"margin-left: 10px\" @click=\"search\">查询</el-button>\n            <el-button type=\"warning\" plain style=\"margin-left: 10px\" @click=\"reset\">重置</el-button>\n            <el-button type=\"primary\" plain @click=\"handleAdd\">新增</el-button>\n        </div>\n        <div class=\"table\">\n            <el-table :data=\"teams\" @selection-change=\"handleSelectionChange\" border>\n                <el-table-column prop=\"teamId\" label=\"团队ID\" sortable></el-table-column>\n                <el-table-column prop=\"teamName\" label=\"团队名称\"></el-table-column>\n                <el-table-column prop=\"virtualCoins\" label=\"虚拟币数量\"></el-table-column>\n                <el-table-column prop=\"creationDate\" label=\"入住日期\"></el-table-column>\n            </el-table>\n        </div>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n    data() {\n        return {\n\n        }\n    },\n    created() {\n        this.load(); // 页面加载时获取数据\n    },\n    methods: {\n        handleDialogClose() {\n            this.dialogVisible = false;\n        },\n        async load() {\n            try {\n                const response = await axios.get('http://localhost:8080/records/achieveRecords');\n                if (response.status === 200 && response.data) {\n                    console.log(\"团队列表数据:\", response.data);\n                    this.teams = response.data.data; // 假设返回的数据包含团队列表\n                    console.log(\"团队列表数据teams:\", this.teams);\n                } else {\n                    console.error(\"服务器返回了不符合预期的响应\", response);\n                }\n            } catch (error) {\n                if (error.response) {\n                    // 服务器响应了错误状态码\n                    console.error(\"服务器错误:\", error.response.data);\n                } else if (error.request) {\n                    // 请求没有收到响应\n                    console.error(\"没有收到响应:\", error.request);\n                } else {\n                    // 其他类型的错误（如请求配置错误）\n                    console.error(\"请求错误:\", error.message);\n                }\n            }\n        }\n        ,\n        async search() {\n\n            // 如果没有输入查询条件，提醒用户\n            if (!this.searchQuery) {\n                this.$message.error('请输入团队ID');\n                return;\n            }\n\n            try {\n                // 使用输入的团队 ID 调用后端接口\n                const response = await axios.get(`http://localhost:8080/team/${this.searchQuery}`);\n\n                // 成功获取数据后，更新表格数据\n                if (response.status === 200 && response.data) {\n                    console.log(response.data);\n                    this.teams = [response.data];  // 假设返回的是一个团队对象\n                } else if (!response.data) {\n                    this.$message.error(\"没有这支团队\");\n                }\n            } catch (error) {\n                // 处理查询失败的情况\n                this.$message.error(\"查询失败\");\n                console.error(\"查询失败:\", error);\n            }\n        },\n        reset() {\n            // 重置搜索条件并重新加载数据\n            this.searchQuery = '';\n            this.load();\n        },\n        handleAdd() {\n            // 处理新增操作\n            console.log(\"新增团队\");\n            this.newTeam = {\n                teamId: null,\n                teamName: \"\",\n                virtualCoins: 0,\n                creationDate: null,\n            };\n            this.editMode = false;  // 设置为新增模式\n            this.dialogVisible = true; // 显示对话框\n        },\n    },\n};\n</script>\n\n<style scoped>\n.container {\n    padding: 20px;\n    background-color: #f9f9f9;\n}\n\n.search,\n.operation {\n    margin-bottom: 15px;\n}\n\n\n.search,\n.operation {\n    display: flex;\n    align-items: center;\n    margin-bottom: 15px;\n}\n\n.table {\n    border: 1px solid #e0e0e0;\n    border-radius: 5px;\n    background-color: #ffffff;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n    padding: 10px;\n}\n</style>"],"mappings":"AAoBA,OAAAA,KAAA;AAEA;EACAC,KAAA;IACA,QAEA;EACA;EACAC,QAAA;IACA,KAAAC,IAAA;EACA;EACAC,OAAA;IACAC,kBAAA;MACA,KAAAC,aAAA;IACA;IACA,MAAAH,KAAA;MACA;QACA,MAAAI,QAAA,SAAAP,KAAA,CAAAQ,GAAA;QACA,IAAAD,QAAA,CAAAE,MAAA,YAAAF,QAAA,CAAAN,IAAA;UACAS,OAAA,CAAAC,GAAA,YAAAJ,QAAA,CAAAN,IAAA;UACA,KAAAW,KAAA,GAAAL,QAAA,CAAAN,IAAA,CAAAA,IAAA;UACAS,OAAA,CAAAC,GAAA,sBAAAC,KAAA;QACA;UACAF,OAAA,CAAAG,KAAA,mBAAAN,QAAA;QACA;MACA,SAAAM,KAAA;QACA,IAAAA,KAAA,CAAAN,QAAA;UACA;UACAG,OAAA,CAAAG,KAAA,WAAAA,KAAA,CAAAN,QAAA,CAAAN,IAAA;QACA,WAAAY,KAAA,CAAAC,OAAA;UACA;UACAJ,OAAA,CAAAG,KAAA,YAAAA,KAAA,CAAAC,OAAA;QACA;UACA;UACAJ,OAAA,CAAAG,KAAA,UAAAA,KAAA,CAAAE,OAAA;QACA;MACA;IACA;IAEA,MAAAC,OAAA;MAEA;MACA,UAAAC,WAAA;QACA,KAAAC,QAAA,CAAAL,KAAA;QACA;MACA;MAEA;QACA;QACA,MAAAN,QAAA,SAAAP,KAAA,CAAAQ,GAAA,oCAAAS,WAAA;;QAEA;QACA,IAAAV,QAAA,CAAAE,MAAA,YAAAF,QAAA,CAAAN,IAAA;UACAS,OAAA,CAAAC,GAAA,CAAAJ,QAAA,CAAAN,IAAA;UACA,KAAAW,KAAA,IAAAL,QAAA,CAAAN,IAAA;QACA,YAAAM,QAAA,CAAAN,IAAA;UACA,KAAAiB,QAAA,CAAAL,KAAA;QACA;MACA,SAAAA,KAAA;QACA;QACA,KAAAK,QAAA,CAAAL,KAAA;QACAH,OAAA,CAAAG,KAAA,UAAAA,KAAA;MACA;IACA;IACAM,MAAA;MACA;MACA,KAAAF,WAAA;MACA,KAAAd,IAAA;IACA;IACAiB,UAAA;MACA;MACAV,OAAA,CAAAC,GAAA;MACA,KAAAU,OAAA;QACAC,MAAA;QACAC,QAAA;QACAC,YAAA;QACAC,YAAA;MACA;MACA,KAAAC,QAAA;MACA,KAAApB,aAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"export default {\n  data() {\n    return {\n      searchQuery: \"\",\n      // 搜索内容\n      noticeData: [],\n      // 公告数据\n      dialogVisible: false,\n      // 弹窗是否可见\n      dialogTitle: \"\",\n      // 弹窗标题\n      form: {\n        id: null,\n        content: \"\",\n        display: 1 // 是否显示，1为显示，0为隐藏\n      },\n      formRules: {\n        content: [{\n          required: true,\n          message: \"请输入公告内容\",\n          trigger: \"blur\"\n        }],\n        display: [{\n          required: true,\n          message: \"请选择是否显示\",\n          trigger: \"change\"\n        }]\n      }\n    };\n  },\n  methods: {\n    // 查询公告\n    search() {\n      this.fetchData({\n        search: this.searchQuery\n      });\n    },\n    // 重置查询条件\n    reset() {\n      this.searchQuery = \"\";\n      this.fetchData();\n    },\n    // 打开新增/编辑弹窗\n    openDialog(type, row = {}) {\n      this.dialogTitle = type === \"add\" ? \"新增公告\" : \"编辑公告\";\n      this.dialogVisible = true;\n      if (type === \"add\") {\n        // 清空表单数据\n        this.form = {\n          id: null,\n          content: \"\",\n          display: 1\n        };\n      } else {\n        // 填充表单数据\n        this.form = {\n          ...row\n        };\n      }\n    },\n    // 保存公告\n    save() {\n      this.$refs.formRef.validate(valid => {\n        if (!valid) return;\n        const apiCall = this.form.id ? this.$http.put(`/notices/${this.form.id}`, this.form) // 编辑\n        : this.$http.post(\"/notices\", this.form); // 新增\n\n        apiCall.then(() => {\n          ElMessage.success(this.form.id ? \"编辑成功！\" : \"新增成功！\");\n          this.dialogVisible = false;\n          this.fetchData(); // 刷新数据\n        }).catch(error => {\n          console.error(\"Failed to save notice:\", error);\n          ElMessage.error(this.form.id ? \"编辑失败！\" : \"新增失败！\");\n        });\n      });\n    },\n    // 删除公告\n    del(id) {\n      ElMessageBox.confirm(\"确认删除此公告吗？\", \"提示\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(() => {\n        this.$http.delete(`/notices/${id}`).then(() => {\n          ElMessage.success(\"删除成功！\");\n          this.fetchData(); // 重新加载数据\n        }).catch(error => {\n          console.error(\"Failed to delete:\", error);\n          ElMessage.error(\"删除失败！\");\n        });\n      }).catch(() => {\n        ElMessage.info(\"已取消删除\");\n      });\n    },\n    // 格式化是否显示\n    formatDisplay(row) {\n      return row.display === 1 ? \"是\" : \"否\";\n    },\n    // 格式化日期\n    formatDate(row) {\n      const date = new Date(row.createdAt);\n      return date.toLocaleString(); // 本地化时间\n    },\n    // 获取公告数据\n    fetchData(params = {}) {\n      this.$http.get(\"/notices\", {\n        params\n      }).then(response => {\n        this.noticeData = response.data || [];\n      }).catch(error => {\n        console.error(\"Failed to fetch data:\", error);\n        ElMessage.error(\"加载公告失败！\");\n      });\n    }\n  },\n  mounted() {\n    // 初始化加载公告数据\n    this.fetchData();\n  }\n};","map":{"version":3,"names":["data","searchQuery","noticeData","dialogVisible","dialogTitle","form","id","content","display","formRules","required","message","trigger","methods","search","fetchData","reset","openDialog","type","row","save","$refs","formRef","validate","valid","apiCall","$http","put","post","then","ElMessage","success","catch","error","console","del","ElMessageBox","confirm","confirmButtonText","cancelButtonText","delete","info","formatDisplay","formatDate","date","Date","createdAt","toLocaleString","params","get","response","mounted"],"sources":["src/views/manage/NoticeView.vue"],"sourcesContent":["<template>\n    <div>\n        <div class=\"search\">\n            <el-input v-model=\"searchQuery\" placeholder=\"请输入公告内容查询\" style=\"width: 200px\" />\n            <el-button type=\"info\" plain style=\"margin-left: 10px\" @click=\"search\">查询</el-button>\n            <el-button type=\"warning\" plain style=\"margin-left: 10px\" @click=\"reset\">重置</el-button>\n            <el-button type=\"primary\" plain @click=\"openDialog('add')\">新增</el-button>\n        </div>\n        <div class=\"table\">\n            <el-table :data=\"noticeData\" border>\n                <el-table-column prop=\"id\" label=\"Id\" sortable />\n                <el-table-column prop=\"content\" label=\"公告内容\" />\n                <el-table-column prop=\"createdAt\" label=\"公告时间\" :formatter=\"formatDate\" />\n                <el-table-column prop=\"display\" label=\"是否显示\" :formatter=\"formatDisplay\" />\n                <el-table-column label=\"操作\">\n                    <template #default=\"scope\">\n                        <el-button size=\"mini\" type=\"primary\" plain @click=\"openDialog('edit', scope.row)\">\n                            编辑\n                        </el-button>\n                        <el-button size=\"mini\" type=\"danger\" plain @click=\"del(scope.row.id)\">删除</el-button>\n                    </template>\n                </el-table-column>\n            </el-table>\n        </div>\n\n        <!-- 新增/编辑弹窗 -->\n        <el-dialog :title=\"dialogTitle\" v-model=\"dialogVisible\" width=\"500px\">\n            <el-form :model=\"form\" :rules=\"formRules\" ref=\"formRef\" label-width=\"100px\">\n                <el-form-item label=\"公告内容\" prop=\"content\">\n                    <el-input v-model=\"form.content\" placeholder=\"请输入公告内容\" />\n                </el-form-item>\n                <el-form-item label=\"是否显示\" prop=\"display\">\n                    <el-switch v-model=\"form.display\" active-value=\"1\" inactive-value=\"0\" />\n                </el-form-item>\n            </el-form>\n            <div slot=\"footer\" class=\"dialog-footer\">\n                <el-button @click=\"dialogVisible = false\">取消</el-button>\n                <el-button type=\"primary\" @click=\"save\">保存</el-button>\n            </div>\n        </el-dialog>\n    </div>\n</template>\n\n<script>\n\nexport default {\n    data() {\n        return {\n            searchQuery: \"\", // 搜索内容\n            noticeData: [], // 公告数据\n            dialogVisible: false, // 弹窗是否可见\n            dialogTitle: \"\", // 弹窗标题\n            form: {\n                id: null,\n                content: \"\",\n                display: 1, // 是否显示，1为显示，0为隐藏\n            },\n            formRules: {\n                content: [{ required: true, message: \"请输入公告内容\", trigger: \"blur\" }],\n                display: [{ required: true, message: \"请选择是否显示\", trigger: \"change\" }],\n            },\n        };\n    },\n    methods: {\n        // 查询公告\n        search() {\n            this.fetchData({ search: this.searchQuery });\n        },\n        // 重置查询条件\n        reset() {\n            this.searchQuery = \"\";\n            this.fetchData();\n        },\n        // 打开新增/编辑弹窗\n        openDialog(type, row = {}) {\n            this.dialogTitle = type === \"add\" ? \"新增公告\" : \"编辑公告\";\n            this.dialogVisible = true;\n            if (type === \"add\") {\n                // 清空表单数据\n                this.form = { id: null, content: \"\", display: 1 };\n            } else {\n                // 填充表单数据\n                this.form = { ...row };\n            }\n        },\n        // 保存公告\n        save() {\n            this.$refs.formRef.validate((valid) => {\n                if (!valid) return;\n\n                const apiCall = this.form.id\n                    ? this.$http.put(`/notices/${this.form.id}`, this.form) // 编辑\n                    : this.$http.post(\"/notices\", this.form); // 新增\n\n                apiCall\n                    .then(() => {\n                        ElMessage.success(this.form.id ? \"编辑成功！\" : \"新增成功！\");\n                        this.dialogVisible = false;\n                        this.fetchData(); // 刷新数据\n                    })\n                    .catch((error) => {\n                        console.error(\"Failed to save notice:\", error);\n                        ElMessage.error(this.form.id ? \"编辑失败！\" : \"新增失败！\");\n                    });\n            });\n        },\n        // 删除公告\n        del(id) {\n            ElMessageBox.confirm(\"确认删除此公告吗？\", \"提示\", {\n                confirmButtonText: \"确定\",\n                cancelButtonText: \"取消\",\n                type: \"warning\",\n            })\n                .then(() => {\n                    this.$http\n                        .delete(`/notices/${id}`)\n                        .then(() => {\n                            ElMessage.success(\"删除成功！\");\n                            this.fetchData(); // 重新加载数据\n                        })\n                        .catch((error) => {\n                            console.error(\"Failed to delete:\", error);\n                            ElMessage.error(\"删除失败！\");\n                        });\n                })\n                .catch(() => {\n                    ElMessage.info(\"已取消删除\");\n                });\n        },\n        // 格式化是否显示\n        formatDisplay(row) {\n            return row.display === 1 ? \"是\" : \"否\";\n        },\n        // 格式化日期\n        formatDate(row) {\n            const date = new Date(row.createdAt);\n            return date.toLocaleString(); // 本地化时间\n        },\n        // 获取公告数据\n        fetchData(params = {}) {\n            this.$http\n                .get(\"/notices\", { params })\n                .then((response) => {\n                    this.noticeData = response.data || [];\n                })\n                .catch((error) => {\n                    console.error(\"Failed to fetch data:\", error);\n                    ElMessage.error(\"加载公告失败！\");\n                });\n        },\n    },\n    mounted() {\n        // 初始化加载公告数据\n        this.fetchData();\n    },\n};\n</script>\n\n<style scoped>\n.search {\n    margin-bottom: 20px;\n}\n\n.table {\n    margin-top: 10px;\n}\n</style>"],"mappings":"AA6CA;EACAA,KAAA;IACA;MACAC,WAAA;MAAA;MACAC,UAAA;MAAA;MACAC,aAAA;MAAA;MACAC,WAAA;MAAA;MACAC,IAAA;QACAC,EAAA;QACAC,OAAA;QACAC,OAAA;MACA;MACAC,SAAA;QACAF,OAAA;UAAAG,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;QACAJ,OAAA;UAAAE,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MACA;IACA;EACA;EACAC,OAAA;IACA;IACAC,OAAA;MACA,KAAAC,SAAA;QAAAD,MAAA,OAAAb;MAAA;IACA;IACA;IACAe,MAAA;MACA,KAAAf,WAAA;MACA,KAAAc,SAAA;IACA;IACA;IACAE,WAAAC,IAAA,EAAAC,GAAA;MACA,KAAAf,WAAA,GAAAc,IAAA;MACA,KAAAf,aAAA;MACA,IAAAe,IAAA;QACA;QACA,KAAAb,IAAA;UAAAC,EAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA;MACA;QACA;QACA,KAAAH,IAAA;UAAA,GAAAc;QAAA;MACA;IACA;IACA;IACAC,KAAA;MACA,KAAAC,KAAA,CAAAC,OAAA,CAAAC,QAAA,CAAAC,KAAA;QACA,KAAAA,KAAA;QAEA,MAAAC,OAAA,QAAApB,IAAA,CAAAC,EAAA,GACA,KAAAoB,KAAA,CAAAC,GAAA,kBAAAtB,IAAA,CAAAC,EAAA,SAAAD,IAAA;QAAA,EACA,KAAAqB,KAAA,CAAAE,IAAA,kBAAAvB,IAAA;;QAEAoB,OAAA,CACAI,IAAA;UACAC,SAAA,CAAAC,OAAA,MAAA1B,IAAA,CAAAC,EAAA;UACA,KAAAH,aAAA;UACA,KAAAY,SAAA;QACA,GACAiB,KAAA,CAAAC,KAAA;UACAC,OAAA,CAAAD,KAAA,2BAAAA,KAAA;UACAH,SAAA,CAAAG,KAAA,MAAA5B,IAAA,CAAAC,EAAA;QACA;MACA;IACA;IACA;IACA6B,IAAA7B,EAAA;MACA8B,YAAA,CAAAC,OAAA;QACAC,iBAAA;QACAC,gBAAA;QACArB,IAAA;MACA,GACAW,IAAA;QACA,KAAAH,KAAA,CACAc,MAAA,aAAAlC,EAAA,IACAuB,IAAA;UACAC,SAAA,CAAAC,OAAA;UACA,KAAAhB,SAAA;QACA,GACAiB,KAAA,CAAAC,KAAA;UACAC,OAAA,CAAAD,KAAA,sBAAAA,KAAA;UACAH,SAAA,CAAAG,KAAA;QACA;MACA,GACAD,KAAA;QACAF,SAAA,CAAAW,IAAA;MACA;IACA;IACA;IACAC,cAAAvB,GAAA;MACA,OAAAA,GAAA,CAAAX,OAAA;IACA;IACA;IACAmC,WAAAxB,GAAA;MACA,MAAAyB,IAAA,OAAAC,IAAA,CAAA1B,GAAA,CAAA2B,SAAA;MACA,OAAAF,IAAA,CAAAG,cAAA;IACA;IACA;IACAhC,UAAAiC,MAAA;MACA,KAAAtB,KAAA,CACAuB,GAAA;QAAAD;MAAA,GACAnB,IAAA,CAAAqB,QAAA;QACA,KAAAhD,UAAA,GAAAgD,QAAA,CAAAlD,IAAA;MACA,GACAgC,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,0BAAAA,KAAA;QACAH,SAAA,CAAAG,KAAA;MACA;IACA;EACA;EACAkB,QAAA;IACA;IACA,KAAApC,SAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
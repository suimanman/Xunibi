{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as echarts from \"echarts\";\nexport default {\n  props: {\n    chartData: {\n      type: Array,\n      required: true\n    }\n  },\n  data() {\n    return {\n      ExpandeChart: null\n    };\n  },\n  mounted() {\n    // // window.onload = () => {\n    // //     this.initChart(); // 在窗口完全加载后初始化图表\n    // // };\n    this.$nextTick(() => {\n      this.initChart(); // 等待 DOM 渲染完成后初始化图表\n    });\n    window.addEventListener(\"resize\", this.resizeChart); // 窗口大小变化时调整图表尺寸\n  },\n  beforeDestroy() {\n    window.removeEventListener(\"resize\", this.resizeChart); // 防止内存泄漏\n  },\n  watch: {\n    chartData: {\n      immediate: true,\n      handler(newValue) {\n        this.updateChart(newValue);\n      }\n    }\n  },\n  methods: {\n    resizeChart() {\n      if (this.ExpandeChart) {\n        this.ExpandeChart.resize(); // 调整图表尺寸\n      }\n    },\n    initChart() {\n      if (this.chartData && this.chartData.length > 0) {\n        const chartDom = this.$refs.ExpandeChart;\n        this.ExpandeChart = echarts.init(chartDom);\n\n        // 确保 chartData[0] 是有效的\n        const series = this.chartData[0] && this.chartData[0].slice(1).map(() => ({\n          type: \"line\",\n          smooth: true,\n          seriesLayoutBy: \"row\",\n          emphasis: {\n            focus: \"series\"\n          }\n        }));\n        if (series) {\n          series.push({\n            type: \"pie\",\n            id: \"pie\",\n            radius: \"30%\",\n            center: [\"50%\", \"25%\"],\n            emphasis: {\n              focus: \"self\"\n            },\n            label: {\n              formatter: \"{b}: {@currentMonth} ({d}%)\"\n            },\n            encode: {\n              itemName: \"product\",\n              value: \"currentMonth\",\n              tooltip: \"currentMonth\"\n            }\n          });\n          const option = {\n            legend: {},\n            tooltip: {\n              trigger: \"axis\",\n              showContent: false\n            },\n            dataset: {\n              source: this.chartData\n            },\n            xAxis: {\n              type: \"category\"\n            },\n            yAxis: {\n              gridIndex: 0\n            },\n            grid: {\n              top: \"55%\"\n            },\n            series\n          };\n          this.ExpandeChart.setOption(option);\n          this.ExpandeChart.on(\"updateAxisPointer\", event => {\n            const xAxisInfo = event.axesInfo[0];\n            if (xAxisInfo) {\n              const dimension = xAxisInfo.value + 1;\n              this.ExpandeChart.setOption({\n                series: {\n                  id: \"pie\",\n                  label: {\n                    formatter: \"{b}: {@[\" + dimension + \"]} ({d}%)\"\n                  },\n                  encode: {\n                    value: dimension,\n                    tooltip: dimension\n                  }\n                }\n              });\n            }\n          });\n        }\n      } else {\n        console.error('Invalid or empty chartData:', this.chartData);\n      }\n    },\n    updateChart(newValue) {\n      if (this.ExpandeChart && newValue && newValue.length > 0) {\n        const series = newValue[0].slice(1).map(() => ({\n          type: \"line\",\n          smooth: true,\n          seriesLayoutBy: \"row\",\n          emphasis: {\n            focus: \"series\"\n          }\n        }));\n        series.push({\n          type: \"pie\",\n          id: \"pie\",\n          radius: \"30%\",\n          center: [\"50%\", \"25%\"],\n          emphasis: {\n            focus: \"self\"\n          },\n          label: {\n            formatter: \"{b}: {@currentMonth} ({d}%)\"\n          },\n          encode: {\n            itemName: \"product\",\n            value: \"currentMonth\",\n            tooltip: \"currentMonth\"\n          }\n        });\n        this.ExpandeChart.setOption({\n          dataset: {\n            source: newValue\n          },\n          series\n        });\n      } else {\n        console.error('Invalid or empty chartData:', newValue);\n      }\n    }\n  }\n};","map":{"version":3,"names":["echarts","props","chartData","type","Array","required","data","ExpandeChart","mounted","$nextTick","initChart","window","addEventListener","resizeChart","beforeDestroy","removeEventListener","watch","immediate","handler","newValue","updateChart","methods","resize","length","chartDom","$refs","init","series","slice","map","smooth","seriesLayoutBy","emphasis","focus","push","id","radius","center","label","formatter","encode","itemName","value","tooltip","option","legend","trigger","showContent","dataset","source","xAxis","yAxis","gridIndex","grid","top","setOption","on","event","xAxisInfo","axesInfo","dimension","console","error"],"sources":["src/components/ExpandComponent.vue"],"sourcesContent":["<template>\n    <div ref=\"ExpandeChart\" style=\"width: 100%;height: 600px;\"></div>\n</template>\n\n<script>\nimport * as echarts from \"echarts\";\n\nexport default {\n    props: {\n        chartData: {\n            type: Array,\n            required: true,\n        },\n    },\n    data() {\n        return {\n            ExpandeChart: null,\n        };\n    },\n    mounted() {\n        // // window.onload = () => {\n        // //     this.initChart(); // 在窗口完全加载后初始化图表\n        // // };\n        this.$nextTick(() => {\n            this.initChart(); // 等待 DOM 渲染完成后初始化图表\n        });\n        window.addEventListener(\"resize\", this.resizeChart); // 窗口大小变化时调整图表尺寸\n\n    },\n    beforeDestroy() {\n        window.removeEventListener(\"resize\", this.resizeChart); // 防止内存泄漏\n    },\n    watch: {\n        chartData: {\n            immediate: true,\n            handler(newValue) {\n                this.updateChart(newValue);\n            },\n        },\n    },\n    methods: {\n        resizeChart() {\n            if (this.ExpandeChart) {\n                this.ExpandeChart.resize(); // 调整图表尺寸\n            }\n        },\n        initChart() {\n            if (this.chartData && this.chartData.length > 0) {\n                const chartDom = this.$refs.ExpandeChart;\n                this.ExpandeChart = echarts.init(chartDom);\n\n                // 确保 chartData[0] 是有效的\n                const series = this.chartData[0] && this.chartData[0].slice(1).map(() => ({\n                    type: \"line\",\n                    smooth: true,\n                    seriesLayoutBy: \"row\",\n                    emphasis: { focus: \"series\" },\n                }));\n\n                if (series) {\n                    series.push({\n                        type: \"pie\",\n                        id: \"pie\",\n                        radius: \"30%\",\n                        center: [\"50%\", \"25%\"],\n                        emphasis: { focus: \"self\" },\n                        label: { formatter: \"{b}: {@currentMonth} ({d}%)\" },\n                        encode: { itemName: \"product\", value: \"currentMonth\", tooltip: \"currentMonth\" },\n                    });\n\n                    const option = {\n                        legend: {},\n                        tooltip: {\n                            trigger: \"axis\",\n                            showContent: false,\n                        },\n                        dataset: {\n                            source: this.chartData,\n                        },\n                        xAxis: { type: \"category\" },\n                        yAxis: { gridIndex: 0 },\n                        grid: { top: \"55%\" },\n                        series\n                    };\n\n                    this.ExpandeChart.setOption(option);\n\n                    this.ExpandeChart.on(\"updateAxisPointer\", (event) => {\n                        const xAxisInfo = event.axesInfo[0];\n                        if (xAxisInfo) {\n                            const dimension = xAxisInfo.value + 1;\n                            this.ExpandeChart.setOption({\n                                series: {\n                                    id: \"pie\",\n                                    label: { formatter: \"{b}: {@[\" + dimension + \"]} ({d}%)\" },\n                                    encode: { value: dimension, tooltip: dimension },\n                                },\n                            });\n                        }\n                    });\n                }\n            } else {\n                console.error('Invalid or empty chartData:', this.chartData);\n            }\n        },\n        updateChart(newValue) {\n            if (this.ExpandeChart && newValue && newValue.length > 0) {\n                const series = newValue[0].slice(1).map(() => ({\n                    type: \"line\",\n                    smooth: true,\n                    seriesLayoutBy: \"row\",\n                    emphasis: { focus: \"series\" },\n                }));\n\n                series.push({\n                    type: \"pie\",\n                    id: \"pie\",\n                    radius: \"30%\",\n                    center: [\"50%\", \"25%\"],\n                    emphasis: { focus: \"self\" },\n                    label: { formatter: \"{b}: {@currentMonth} ({d}%)\" },\n                    encode: { itemName: \"product\", value: \"currentMonth\", tooltip: \"currentMonth\" },\n                });\n\n                this.ExpandeChart.setOption({\n                    dataset: {\n                        source: newValue,\n                    },\n                    series,\n                });\n            } else {\n                console.error('Invalid or empty chartData:', newValue);\n            }\n        },\n    },\n\n};\n</script>\n\n<style scoped></style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
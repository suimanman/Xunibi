{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as echarts from \"echarts\";\nexport default {\n  props: {\n    chartData: {\n      type: Array,\n      required: true\n    }\n  },\n  data() {\n    return {\n      IncomeChart: null\n    };\n  },\n  mounted() {\n    // // window.onload = () => {\n    // //     this.initChart(); // 在窗口完全加载后初始化图表\n    // // };\n    this.$nextTick(() => {\n      this.initChart(); // 等待 DOM 渲染完成后初始化图表\n    });\n    window.addEventListener(\"resize\", this.resizeChart); // 窗口大小变化时调整图表尺寸\n  },\n  beforeDestroy() {\n    window.removeEventListener(\"resize\", this.resizeChart); // 防止内存泄漏\n  },\n  watch: {\n    chartData: {\n      immediate: true,\n      handler(newValue) {\n        this.updateChart(newValue);\n      }\n    }\n  },\n  methods: {\n    resizeChart() {\n      if (this.IncomeChart) {\n        this.IncomeChart.resize(); // 调整图表尺寸\n      }\n    },\n    initChart() {\n      const chartDom = this.$refs.IncomeChart;\n      this.IncomeChart = echarts.init(chartDom);\n      const series = this.chartData.slice(1).map(() => ({\n        type: \"line\",\n        smooth: true,\n        seriesLayoutBy: \"row\",\n        emphasis: {\n          focus: \"series\"\n        }\n      }));\n      series.push({\n        type: \"pie\",\n        id: \"pie\",\n        radius: \"30%\",\n        center: [\"50%\", \"25%\"],\n        emphasis: {\n          focus: \"self\"\n        },\n        label: {\n          formatter: \"{b}: {@currentMonth} ({d}%)\"\n        },\n        encode: {\n          itemName: \"product\",\n          value: \"currentMonth\",\n          tooltip: \"currentMonth\"\n        }\n      });\n      const option = {\n        legend: {},\n        tooltip: {\n          trigger: \"axis\",\n          showContent: false\n        },\n        dataset: {\n          source: this.chartData\n        },\n        xAxis: {\n          type: \"category\"\n        },\n        yAxis: {\n          gridIndex: 0\n        },\n        grid: {\n          top: \"55%\"\n        },\n        series\n      };\n      this.IncomeChart.setOption(option);\n      this.IncomeChart.on(\"updateAxisPointer\", event => {\n        const xAxisInfo = event.axesInfo[0];\n        if (xAxisInfo) {\n          const dimension = xAxisInfo.value + 1;\n          this.IncomeChart.setOption({\n            series: {\n              id: \"pie\",\n              label: {\n                formatter: \"{b}: {@[\" + dimension + \"]} ({d}%)\"\n              },\n              encode: {\n                value: dimension,\n                tooltip: dimension\n              }\n            }\n          });\n        }\n      });\n    },\n    updateChart(newValue) {\n      if (this.IncomeChart) {\n        const series = newValue[0].slice(1).map(() => ({\n          type: \"line\",\n          smooth: true,\n          seriesLayoutBy: \"row\",\n          emphasis: {\n            focus: \"series\"\n          }\n        }));\n        series.push({\n          type: \"pie\",\n          id: \"pie\",\n          radius: \"30%\",\n          center: [\"50%\", \"25%\"],\n          emphasis: {\n            focus: \"self\"\n          },\n          label: {\n            formatter: \"{b}: {@currentMonth} ({d}%)\"\n          },\n          encode: {\n            itemName: \"product\",\n            value: \"currentMonth\",\n            tooltip: \"currentMonth\"\n          }\n        });\n        this.IncomeChart.setOption({\n          dataset: {\n            source: newValue\n          },\n          series\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["echarts","props","chartData","type","Array","required","data","IncomeChart","mounted","$nextTick","initChart","window","addEventListener","resizeChart","beforeDestroy","removeEventListener","watch","immediate","handler","newValue","updateChart","methods","resize","chartDom","$refs","init","series","slice","map","smooth","seriesLayoutBy","emphasis","focus","push","id","radius","center","label","formatter","encode","itemName","value","tooltip","option","legend","trigger","showContent","dataset","source","xAxis","yAxis","gridIndex","grid","top","setOption","on","event","xAxisInfo","axesInfo","dimension"],"sources":["src/components/IncomeComponent.vue"],"sourcesContent":["<template>\n    <div ref=\"IncomeChart\" style=\"width: 100%;height: 600px;\"></div>\n</template>\n\n<script>\nimport * as echarts from \"echarts\";\n\nexport default {\n    props: {\n        chartData: {\n            type: Array,\n            required: true,\n        },\n    },\n    data() {\n        return {\n            IncomeChart: null,\n        };\n    },\n    mounted() {\n        // // window.onload = () => {\n        // //     this.initChart(); // 在窗口完全加载后初始化图表\n        // // };\n        this.$nextTick(() => {\n            this.initChart(); // 等待 DOM 渲染完成后初始化图表\n        });\n        window.addEventListener(\"resize\", this.resizeChart); // 窗口大小变化时调整图表尺寸\n\n    },\n    beforeDestroy() {\n        window.removeEventListener(\"resize\", this.resizeChart); // 防止内存泄漏\n    },\n    watch: {\n        chartData: {\n            immediate: true,\n            handler(newValue) {\n                this.updateChart(newValue);\n            },\n        },\n    },\n    methods: {\n        resizeChart() {\n            if (this.IncomeChart) {\n                this.IncomeChart.resize(); // 调整图表尺寸\n            }\n        },\n        initChart() {\n            const chartDom = this.$refs.IncomeChart;\n            this.IncomeChart = echarts.init(chartDom);\n            const series = this.chartData.slice(1).map(() => ({\n                type: \"line\",\n                smooth: true,\n                seriesLayoutBy: \"row\",\n                emphasis: { focus: \"series\" },\n            }));\n\n            series.push({\n                type: \"pie\",\n                id: \"pie\",\n                radius: \"30%\",\n                center: [\"50%\", \"25%\"],\n                emphasis: { focus: \"self\" },\n                label: { formatter: \"{b}: {@currentMonth} ({d}%)\" },\n                encode: { itemName: \"product\", value: \"currentMonth\", tooltip: \"currentMonth\" },\n            });\n\n            const option = {\n                legend: {},\n                tooltip: {\n                    trigger: \"axis\",\n                    showContent: false,\n                },\n                dataset: {\n                    source: this.chartData,\n                },\n                xAxis: { type: \"category\" },\n                yAxis: { gridIndex: 0 },\n                grid: { top: \"55%\" },\n                series\n            };\n\n            this.IncomeChart.setOption(option);\n\n            this.IncomeChart.on(\"updateAxisPointer\", (event) => {\n                const xAxisInfo = event.axesInfo[0];\n                if (xAxisInfo) {\n                    const dimension = xAxisInfo.value + 1;\n                    this.IncomeChart.setOption({\n                        series: {\n                            id: \"pie\",\n                            label: { formatter: \"{b}: {@[\" + dimension + \"]} ({d}%)\" },\n                            encode: { value: dimension, tooltip: dimension },\n                        },\n                    });\n                }\n            });\n        },\n        updateChart(newValue) {\n            if (this.IncomeChart) {\n                const series = newValue[0].slice(1).map(() => ({\n                    type: \"line\",\n                    smooth: true,\n                    seriesLayoutBy: \"row\",\n                    emphasis: { focus: \"series\" },\n                }));\n\n                series.push({\n                    type: \"pie\",\n                    id: \"pie\",\n                    radius: \"30%\",\n                    center: [\"50%\", \"25%\"],\n                    emphasis: { focus: \"self\" },\n                    label: { formatter: \"{b}: {@currentMonth} ({d}%)\" },\n                    encode: { itemName: \"product\", value: \"currentMonth\", tooltip: \"currentMonth\" },\n                });\n\n                this.IncomeChart.setOption({\n                    dataset: {\n                        source: newValue,\n                    },\n                    series,\n                });\n            }\n\n        },\n    },\n};\n</script>\n\n<style scoped></style>\n"],"mappings":";AAKA,YAAAA,OAAA;AAEA;EACAC,KAAA;IACAC,SAAA;MACAC,IAAA,EAAAC,KAAA;MACAC,QAAA;IACA;EACA;EACAC,KAAA;IACA;MACAC,WAAA;IACA;EACA;EACAC,QAAA;IACA;IACA;IACA;IACA,KAAAC,SAAA;MACA,KAAAC,SAAA;IACA;IACAC,MAAA,CAAAC,gBAAA,gBAAAC,WAAA;EAEA;EACAC,cAAA;IACAH,MAAA,CAAAI,mBAAA,gBAAAF,WAAA;EACA;EACAG,KAAA;IACAd,SAAA;MACAe,SAAA;MACAC,QAAAC,QAAA;QACA,KAAAC,WAAA,CAAAD,QAAA;MACA;IACA;EACA;EACAE,OAAA;IACAR,YAAA;MACA,SAAAN,WAAA;QACA,KAAAA,WAAA,CAAAe,MAAA;MACA;IACA;IACAZ,UAAA;MACA,MAAAa,QAAA,QAAAC,KAAA,CAAAjB,WAAA;MACA,KAAAA,WAAA,GAAAP,OAAA,CAAAyB,IAAA,CAAAF,QAAA;MACA,MAAAG,MAAA,QAAAxB,SAAA,CAAAyB,KAAA,IAAAC,GAAA;QACAzB,IAAA;QACA0B,MAAA;QACAC,cAAA;QACAC,QAAA;UAAAC,KAAA;QAAA;MACA;MAEAN,MAAA,CAAAO,IAAA;QACA9B,IAAA;QACA+B,EAAA;QACAC,MAAA;QACAC,MAAA;QACAL,QAAA;UAAAC,KAAA;QAAA;QACAK,KAAA;UAAAC,SAAA;QAAA;QACAC,MAAA;UAAAC,QAAA;UAAAC,KAAA;UAAAC,OAAA;QAAA;MACA;MAEA,MAAAC,MAAA;QACAC,MAAA;QACAF,OAAA;UACAG,OAAA;UACAC,WAAA;QACA;QACAC,OAAA;UACAC,MAAA,OAAA9C;QACA;QACA+C,KAAA;UAAA9C,IAAA;QAAA;QACA+C,KAAA;UAAAC,SAAA;QAAA;QACAC,IAAA;UAAAC,GAAA;QAAA;QACA3B;MACA;MAEA,KAAAnB,WAAA,CAAA+C,SAAA,CAAAX,MAAA;MAEA,KAAApC,WAAA,CAAAgD,EAAA,sBAAAC,KAAA;QACA,MAAAC,SAAA,GAAAD,KAAA,CAAAE,QAAA;QACA,IAAAD,SAAA;UACA,MAAAE,SAAA,GAAAF,SAAA,CAAAhB,KAAA;UACA,KAAAlC,WAAA,CAAA+C,SAAA;YACA5B,MAAA;cACAQ,EAAA;cACAG,KAAA;gBAAAC,SAAA,eAAAqB,SAAA;cAAA;cACApB,MAAA;gBAAAE,KAAA,EAAAkB,SAAA;gBAAAjB,OAAA,EAAAiB;cAAA;YACA;UACA;QACA;MACA;IACA;IACAvC,YAAAD,QAAA;MACA,SAAAZ,WAAA;QACA,MAAAmB,MAAA,GAAAP,QAAA,IAAAQ,KAAA,IAAAC,GAAA;UACAzB,IAAA;UACA0B,MAAA;UACAC,cAAA;UACAC,QAAA;YAAAC,KAAA;UAAA;QACA;QAEAN,MAAA,CAAAO,IAAA;UACA9B,IAAA;UACA+B,EAAA;UACAC,MAAA;UACAC,MAAA;UACAL,QAAA;YAAAC,KAAA;UAAA;UACAK,KAAA;YAAAC,SAAA;UAAA;UACAC,MAAA;YAAAC,QAAA;YAAAC,KAAA;YAAAC,OAAA;UAAA;QACA;QAEA,KAAAnC,WAAA,CAAA+C,SAAA;UACAP,OAAA;YACAC,MAAA,EAAA7B;UACA;UACAO;QACA;MACA;IAEA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}